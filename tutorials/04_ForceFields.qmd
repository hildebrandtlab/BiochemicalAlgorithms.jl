---
title: Working with force fields
engine: julia
---

```{julia}
#| echo: false
#| output: false

using BiochemicalAlgorithms
Base.active_module() = BiochemicalAlgorithms
```


## Preparation

Force fields in BiochemicalAlgorithms.jl are always set up for a given molecular system. Hence, we first need to prepare a `System` object [as usual](getting_started.md), e.g., by loading a structure from a PDB file and applying our fragment database preprocessors:

```{julia}
sys = load_pdb(ball_data_path("../test/data/AlaAla.pdb"))

fdb = FragmentDB()
normalize_names!(sys, fdb)
reconstruct_fragments!(sys, fdb)
build_bonds!(sys, fdb)

sys
```


## Setting up a force field

Setting up a force field boils down to a simple constructor call:

```{julia}
ff = AmberFF(sys)
```

This will initialize the force field object using the atoms (and their positions in particular) as seen at time of construction. Later alterations of the same system must be made known to the force field by calling the `update!` function:

```{julia}
update!(ff)
```


## Force computation

Force vectors for all atoms can be computed using the `compute_forces!` function:

```{julia}
compute_forces!(ff)
```

The force vectors computed here are directly stored in the underlying system:

```{julia}
atoms(sys).F   # or, equivalently, atoms(ff.system).F
```


## Potential energy computation

Similarly, potential energies can be computed via `compute_energy!`:

```{julia}
compute_energy!(ff)
```

This will return the total energy of the system (in kJ/mol). Additionally, the force field object keeps track of individual contributions of force field components, which can be queried like this:

```{julia}
ff.energy
```


## Structure optimization

The force field object can also be used to find a structure minimizing the total energy of the system:

```{julia}
optimize_structure!(ff)
compute_energy!(ff)
```

The opmitization function also updates the atom positions correspondingly such that the structure can be visualized in its optimized state, e.g., through [BiochemicalVisualization.jl](https://github.com/hildebrandtlab/BiochemicalVisualization.jl).

We provide a variant of the optimization function above to only optimize the positions of hydrogen atoms:

```{julia}
#| output: false

optimize_hydrogen_positions!(ff)
```
