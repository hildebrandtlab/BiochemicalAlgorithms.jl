var documenterSearchIndex = {"docs":
[{"location":"public/forcefields/#Force-fields","page":"Force fields","title":"Force fields","text":"","category":"section"},{"location":"public/forcefields/","page":"Force fields","title":"Force fields","text":"CurrentModule = BiochemicalAlgorithms","category":"page"},{"location":"public/forcefields/","page":"Force fields","title":"Force fields","text":"Pages = [\"forcefields.md\"]","category":"page"},{"location":"public/forcefields/","page":"Force fields","title":"Force fields","text":"AmberFF\noptimize_hydrogen_positions!\noptimize_structure!\nupdate!","category":"page"},{"location":"public/forcefields/#BiochemicalAlgorithms.AmberFF","page":"Force fields","title":"BiochemicalAlgorithms.AmberFF","text":"AmberFF(\n    ::AbstractAtomContainer{T},\n    param_file::AbstractString = ball_data_path(\"forcefields/AMBER/amber96.ini\")\n)\n\nInitializes an AMBER force field for the given atom container and the given parameter file (default: AMBER96).\n\nSupported keyword arguments\n\nnonbonded_cutoff::T = 20\nvdw_cutoff::T = 15\nvdw_cuton::T = 13\nelectrostatic_cutoff::T = 15\nelectrostatic_cuton::T = 13\nscaling_vdw_1_4 = 2\nscaling_electrostatic_1_4::T = 1.2\ndistance_dependent_dielectric::Bool = false\nassign_charges::Bool = true\nassign_typenames::Bool = true\nassign_types::Bool = true\noverwrite_nonzero_charges::Bool = true\noverwrite_typenames::Bool = false\nperiodic_boundary_conditions::Bool = false\nperiodic_box_width::T = 100\nperiodic_box_height::T = 100\nperiodic_box_depth::T = 100\nmax_number_of_unassigned_atoms::Int = typemax(Int32)\n\n\n\n\n\n","category":"function"},{"location":"public/forcefields/#BiochemicalAlgorithms.optimize_hydrogen_positions!","page":"Force fields","title":"BiochemicalAlgorithms.optimize_hydrogen_positions!","text":"optimize_hydrogen_positions!(ff::ForceField)\n\nVariant of optimize_structure! that only optimizes hydrogen atom positions.\n\nSupported keyword arguments\n\nSame as optimize_structure!\n\n\n\n\n\n","category":"function"},{"location":"public/forcefields/#BiochemicalAlgorithms.optimize_structure!","page":"Force fields","title":"BiochemicalAlgorithms.optimize_structure!","text":"optimize_structure!(ff::ForceField)\n\nAttempts to solve the energy optimization problem represented by the given force field object.\n\nSupported keyword arguments\n\nThis function passes all keyword arguments to Optimization.solve, with the following default values:\n\nalg = Optimization.LBFGS()\n\n\n\n\n\n","category":"function"},{"location":"public/forcefields/#BiochemicalAlgorithms.update!","page":"Force fields","title":"BiochemicalAlgorithms.update!","text":"update!(ff::ForceField)\n\n\nUpdate the internal data structures of the force field when the system changes (e.g., through coordinate updates).\n\nnote: Note\nChanges to the options or the topology require a call to setup! prior to the call to update!.\n\n\n\n\n\n","category":"function"},{"location":"public/mappings/#Mappings","page":"Mappings","title":"Mappings","text":"","category":"section"},{"location":"public/mappings/","page":"Mappings","title":"Mappings","text":"CurrentModule = BiochemicalAlgorithms","category":"page"},{"location":"public/mappings/","page":"Mappings","title":"Mappings","text":"Pages = [\"mappings.md\"]","category":"page"},{"location":"public/mappings/#Atom-bijections","page":"Mappings","title":"Atom bijections","text":"","category":"section"},{"location":"public/mappings/","page":"Mappings","title":"Mappings","text":"AbstractAtomBijection\nTrivialAtomBijection\natoms(::AbstractAtomBijection)","category":"page"},{"location":"public/mappings/#BiochemicalAlgorithms.AbstractAtomBijection","page":"Mappings","title":"BiochemicalAlgorithms.AbstractAtomBijection","text":"abstract type AbstractAtomBijection{T}\n\nAbstract base type for atom bijections.\n\n\n\n\n\n","category":"type"},{"location":"public/mappings/#BiochemicalAlgorithms.TrivialAtomBijection","page":"Mappings","title":"BiochemicalAlgorithms.TrivialAtomBijection","text":"TrivialAtomBijection{T} <: AbstractAtomBijection{T}\n\nBijection of atoms based on their order in the associated atom containers.\n\nConstructors\n\nTrivialAtomBijection(A::AtomTable{T}, B::AtomTable{T})\n\nCreates a new TrivialAtomBijection{T} from the given tables. Atom order is determined by row number.\n\nTrivialAtomBijection(A::AbstractAtomContainer{T}, B::AbstractAtomContainer{T})\n\nCreates a new TrivialAtomBijection{T} with the atoms of the individual atom containers.\n\nTrivialAtomBijection(A::AtomTable{T}, B::AbstractAtomContainer{T})\n\nCreates a new TrivialAtomBijection{T} by filtering B for atom numbers contained in A. Atom order after filtering must be the same as in A.\n\n\n\n\n\n","category":"type"},{"location":"public/mappings/#BiochemicalAlgorithms.atoms-Tuple{AbstractAtomBijection}","page":"Mappings","title":"BiochemicalAlgorithms.atoms","text":"atoms(\n    ab::AbstractAtomBijection\n) -> Tuple{AtomTable, AtomTable}\n\n\nReturns the tuple of atom tables represented by this bijection.\n\n\n\n\n\n","category":"method"},{"location":"public/mappings/#Rigid-mapping","page":"Mappings","title":"Rigid mapping","text":"","category":"section"},{"location":"public/mappings/","page":"Mappings","title":"Mappings","text":"AbstractRMSDMinimizer\nRMSDMinimizerCoutsias\nRMSDMinimizerKabsch\nRigidTransform\ncompute_rmsd\ncompute_rmsd_minimizer\nmap_rigid!\nrigid_transform!\ntranslate!","category":"page"},{"location":"public/mappings/#BiochemicalAlgorithms.AbstractRMSDMinimizer","page":"Mappings","title":"BiochemicalAlgorithms.AbstractRMSDMinimizer","text":"abstract type AbstractRMSDMinimizer\n\nAbstract base type for RMSD minimizers.\n\n\n\n\n\n","category":"type"},{"location":"public/mappings/#BiochemicalAlgorithms.RMSDMinimizerCoutsias","page":"Mappings","title":"BiochemicalAlgorithms.RMSDMinimizerCoutsias","text":"abstract type RMSDMinimizerCoutsias <: AbstractRMSDMinimizer\n\nAbstract base type for RMSD minimizers based on https://doi.org/10.1002/jcc.20110.\n\n\n\n\n\n","category":"type"},{"location":"public/mappings/#BiochemicalAlgorithms.RMSDMinimizerKabsch","page":"Mappings","title":"BiochemicalAlgorithms.RMSDMinimizerKabsch","text":"abstract type RMSDMinimizerKabsch <: AbstractRMSDMinimizer\n\nAbstract base type for RMSD minimizers based on https://doi.org/10.1107/S0567739476001873.\n\n\n\n\n\n","category":"type"},{"location":"public/mappings/#BiochemicalAlgorithms.RigidTransform","page":"Mappings","title":"BiochemicalAlgorithms.RigidTransform","text":"struct RigidTransform{T<:Real}\n\nRigid transformation represented by a single rotation (around a specific center of rotation) and translation.\n\nConstructors\n\nRigidTransform(r::RotMatrix3{T}, t::Vector3{T}, center::Vector3{T} = zeros(Vector3{T}))\nRigidTransform(r::Matrix3{T}, t::Vector3{T}, center::Vector3{T} = zeros(Vector3{T}))\n\nCreates a new RigidTransform{T} from the given rotation r, center of rotation, and translation t.\n\nnote: Note\nFrom the documentation of Rotations.jl:The given Matrix3{T} should have the property I =RR^T, but this isn't enforced by the constructor.\n\n\n\n\n\n","category":"type"},{"location":"public/mappings/#BiochemicalAlgorithms.compute_rmsd","page":"Mappings","title":"BiochemicalAlgorithms.compute_rmsd","text":"compute_rmsd(f::AbstractAtomBijection)\ncompute_rmsd(A::AbstractAtomContainer{T}, B::AbstractAtomContainer{T})\ncompute_rmsd(A::AtomTable{T}, B::AtomTable{T})\n\nComputes the root mean square deviation (RMSD) of the given atom bijection. Defaults to TrivialAtomBijection if arguments are atom containers or tables.\n\n\n\n\n\n","category":"function"},{"location":"public/mappings/#BiochemicalAlgorithms.compute_rmsd_minimizer","page":"Mappings","title":"BiochemicalAlgorithms.compute_rmsd_minimizer","text":"compute_rmsd_minimizer(f::AbstractAtomBijection)\ncompute_rmsd_minimizer(A::AbstractAtomContainer{T}, B::AbstractAtomContainer{T})\ncompute_rmsd_miminizer(A::AtomTable{T}, B::AtomTable{T})\n\nComputes the RMSD-minimizing rigid transformation for the given atom bijection. Defaults to TrivialAtomBijection if arguments are atom containers or tables.\n\nSupported keyword arguments\n\nminimizer::Type{<: AbstractRMSDMinimizer} = RMSDMinimizerCoutsias Method used for computing the optimal rotation matrix. See RMSDMinimizerCoutsias and RMSDMinimizerKabsch.\n\n\n\n\n\n","category":"function"},{"location":"public/mappings/#BiochemicalAlgorithms.map_rigid!","page":"Mappings","title":"BiochemicalAlgorithms.map_rigid!","text":"map_rigid!(f::AbstractAtomBijection)\nmap_rigid!(A::AbstractAtomContainer{T}, B::AbstractAtomContainer{T})\nmap_rigid!(A::AtomTable{T}, B::AtomTable{T})\n\nComputes, applies, and returns the RMSD-minimizing rigid transformation for the given atom bijection. Defaults to TrivialAtomBijection if arguments are atom containers or tables. Only the first structure (A) is modified, i.e. mapped onto the second one (B).\n\nSupported keyword arguments\n\nheavy_atoms_only::Bool = false If true, hydrogen atoms are ignored during the computation of the optimal transformation. Otherwise, all atoms are used.\nminimizer::Type{<: AbstractRMSDMinimizer} = RMSDMinimizerCoutsias See compute_rmsd_minimizer\n\n\n\n\n\n","category":"function"},{"location":"public/mappings/#BiochemicalAlgorithms.rigid_transform!","page":"Mappings","title":"BiochemicalAlgorithms.rigid_transform!","text":"rigid_transform!(at::AtomTable{T}, transform::RigidTransform{T})\nrigid_transform!(ac::AbstractAtomContainer, transform::RigidTransform)\n\nApplies the rotation and the translation represented by transform (in this order) to all atoms of the given container.\n\n\n\n\n\n","category":"function"},{"location":"public/mappings/#BiochemicalAlgorithms.translate!","page":"Mappings","title":"BiochemicalAlgorithms.translate!","text":"translate!(::AtomTable{T}, t::Vector3{T})\ntranslate!(::AbstractAtomContainer{T}, t::Vector3{T})\n\nTranslates all atoms of the given container according to the given translation vector t.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#Biomolecular-systems","page":"Biomolecular systems","title":"Biomolecular systems","text":"","category":"section"},{"location":"public/system/","page":"Biomolecular systems","title":"Biomolecular systems","text":"CurrentModule = BiochemicalAlgorithms","category":"page"},{"location":"public/system/","page":"Biomolecular systems","title":"Biomolecular systems","text":"Pages = [\"system.md\"]","category":"page"},{"location":"public/system/#Systems","page":"Biomolecular systems","title":"Systems","text":"","category":"section"},{"location":"public/system/","page":"Biomolecular systems","title":"Biomolecular systems","text":"System\ndefault_system\nparent_system\nBase.parent(::System)\nBase.empty!(::System)","category":"page"},{"location":"public/system/#BiochemicalAlgorithms.System","page":"Biomolecular systems","title":"BiochemicalAlgorithms.System","text":"mutable struct System{T} <: AbstractAtomContainer{T}\n\nMutable representation of a biomolecular system.\n\nFields\n\nname::String\nproperties::Properties\nflags::Flags\n\nConstructors\n\nSystem(name::AbstractString = \"\", properties::Properties = Properties(), flags::Flags = Flags())\n\nCreates a new and empty System{Float32}.\n\nSystem{T}(name::AbstractString = \"\", properties::Properties = Properties(), flags::Flags = Flags())\n\nCreates a new and empty System{T}.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.default_system","page":"Biomolecular systems","title":"BiochemicalAlgorithms.default_system","text":"default_system() -> System{Float32}\n\n\nReturns the global default system.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.parent_system","page":"Biomolecular systems","title":"BiochemicalAlgorithms.parent_system","text":"parent_system(::Atom)\nparent_system(::Bond)\nparent_system(::Chain)\nparent_system(::SecondaryStructure)\nparent_system(::Fragment)\nparent_system(::Molecule)\nparent_system(::System)\n\nReturns the System{T} containing the given object. Alias for Base.parent.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#Base.parent-Tuple{System}","page":"Biomolecular systems","title":"Base.parent","text":"parent(::Atom)\nparent(::Bond)\nparent(::Chain)\nparent(::SecondaryStructure)\nparent(::Fragment)\nparent(::Molecule)\nparent(::System)\n\nReturns the System{T} containing the given object.\n\n\n\n\n\n","category":"method"},{"location":"public/system/#Base.empty!-Tuple{System}","page":"Biomolecular systems","title":"Base.empty!","text":"empty!(::System)\n\nRemoves all components from the system.\n\n\n\n\n\n","category":"method"},{"location":"public/system/#System-components","page":"Biomolecular systems","title":"System components","text":"","category":"section"},{"location":"public/system/","page":"Biomolecular systems","title":"Biomolecular systems","text":"AbstractAtomContainer\nAbstractColumnTable\nAbstractSystemComponent\nAbstractSystemComponentTable\nSystemComponentTable\nSystemComponentTableCol\nfull_table\nget_property\nhas_flag\nhas_property\nrevalidate_indices!\nset_flag!\nset_property!\nunset_flag!\nBase.sort(::SystemComponentTable)\nBase.sort!(::SystemComponentTable)","category":"page"},{"location":"public/system/#BiochemicalAlgorithms.AbstractAtomContainer","page":"Biomolecular systems","title":"BiochemicalAlgorithms.AbstractAtomContainer","text":"abstract type AbstractAtomContainer{T} <: AbstractSystemComponent{T}\n\nAbstract base type for all atom containers.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.AbstractColumnTable","page":"Biomolecular systems","title":"BiochemicalAlgorithms.AbstractColumnTable","text":"abstract type AbstractColumnTable <: Tables.AbstractColumns\n\nAbstract base type for all Tables.jl-compatible column tables.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.AbstractSystemComponent","page":"Biomolecular systems","title":"BiochemicalAlgorithms.AbstractSystemComponent","text":"abstract type AbstractSystemComponent{T<:Real}\n\nAbstract base type for all components of a system, including the system itself.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.AbstractSystemComponentTable","page":"Biomolecular systems","title":"BiochemicalAlgorithms.AbstractSystemComponentTable","text":"abstract type AbstractSystemComponentTable{T<:Real} <: AbstractColumnTable\n\nAbstract base type for all Tables.jl-compatible system component tables.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.SystemComponentTable","page":"Biomolecular systems","title":"BiochemicalAlgorithms.SystemComponentTable","text":"struct SystemComponentTable{T, C <: AbstractSystemComponent{T}} <: AbstractSystemComponentTable{T}\n\nTables.jl-compatible system component table for a specific System{T} and system component C (e.g., Atom{T}, Bond{T}, etc.).\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.SystemComponentTableCol","page":"Biomolecular systems","title":"BiochemicalAlgorithms.SystemComponentTableCol","text":"struct SystemComponentTableCol{T} <: AbstractArray{T, 1}\n\nVector-like representation of a single SystemComponentTable column.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.full_table","page":"Biomolecular systems","title":"BiochemicalAlgorithms.full_table","text":"full_table(::SystemComponentTable)\n\nReturns an extended copy of the given table, with all columns being visible.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.get_property","page":"Biomolecular systems","title":"BiochemicalAlgorithms.get_property","text":"get_property(\n    ac::AbstractSystemComponent,\n    key::Symbol\n) -> Any\n\n\nReturns the property associated with the given key in ac.\n\n\n\n\n\nget_property(\n    ac::AbstractSystemComponent,\n    key::Symbol,\n    default\n) -> Any\n\n\nReturns the property associated with the given key in ac. If no such property exists, returns default.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.has_flag","page":"Biomolecular systems","title":"BiochemicalAlgorithms.has_flag","text":"has_flag(ac::AbstractSystemComponent, flag::Symbol) -> Any\n\n\nReturns a Bool indicating whether the given system component has the given flag.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.has_property","page":"Biomolecular systems","title":"BiochemicalAlgorithms.has_property","text":"has_property(\n    ac::AbstractSystemComponent,\n    key::Symbol\n) -> Any\n\n\nReturns a Bool indicating whether the given system component has the given property.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.revalidate_indices!","page":"Biomolecular systems","title":"BiochemicalAlgorithms.revalidate_indices!","text":"revalidate_indices!(::SystemComponentTable)\nrevalidate_indices!(::SystemComponentTableCol)\n\nRemoves remnants of previously removed system components from the given table or table column.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.set_flag!","page":"Biomolecular systems","title":"BiochemicalAlgorithms.set_flag!","text":"set_flag!(ac::AbstractSystemComponent, flag::Symbol) -> Any\n\n\nAdds the given flag to ac.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.set_property!","page":"Biomolecular systems","title":"BiochemicalAlgorithms.set_property!","text":"set_property!(\n    ac::AbstractSystemComponent,\n    key::Symbol,\n    value\n) -> Any\n\n\nSets the property associated with the given key in ac to the given value.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.unset_flag!","page":"Biomolecular systems","title":"BiochemicalAlgorithms.unset_flag!","text":"unset_flag!(\n    ac::AbstractSystemComponent,\n    flag::Symbol\n) -> Any\n\n\nRemoves the given flag from ac.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#Base.sort-Tuple{SystemComponentTable}","page":"Biomolecular systems","title":"Base.sort","text":"sort(::SystemComponentTable)\n\nReturns a copy of the given table, sorted by idx (default) or according to the given keyword arguments.\n\nSupported keyword arguments\n\nSame as Base.sort\n\n\n\n\n\n","category":"method"},{"location":"public/system/#Base.sort!-Tuple{SystemComponentTable}","page":"Biomolecular systems","title":"Base.sort!","text":"sort!(::SystemComponentTable)\n\nIn-place variant of sort.\n\nnote: Note\nOnly the given table is modified, not the underlying system!\n\n\n\n\n\n","category":"method"},{"location":"public/system/#Atoms","page":"Biomolecular systems","title":"Atoms","text":"","category":"section"},{"location":"public/system/","page":"Biomolecular systems","title":"Biomolecular systems","text":"Atom\nAtomTable\natom_by_idx\natom_by_name\natoms\nis_bound_to\nis_geminal\nis_vicinal\nnatoms\nsort_atoms!\nBase.delete!(::Atom)\nBase.push!(::System{T}, ::Atom{T}) where T","category":"page"},{"location":"public/system/#BiochemicalAlgorithms.Atom","page":"Biomolecular systems","title":"BiochemicalAlgorithms.Atom","text":"Atom{T} <: AbstractSystemComponent{T}\n\nMutable representation of an individual atom in a system.\n\nPublic fields\n\nidx::Int\nnumber::Int\nelement::ElementType\nname::String\natom_type::String\nr::Vector3{T}\nv::Vector3{T}\nF::Vector3{T}\nformal_charge::Int\ncharge::T\nradius::T\n\nPrivate fields\n\nproperties::Properties\nflags::Flags\nframe_id::Int\nmolecule_idx::MaybeInt\nchain_idx::MaybeInt\nfragment_idx::MaybeInt\n\nConstructors\n\nAtom(\n    ac::AbstractAtomContainer{T}\n    number::Int,\n    element::ElementType;\n    # keyword arguments\n    name::AbstractString = \"\",\n    atom_type::AbstractString = \"\",\n    r::Vector3{T} = Vector3{T}(0, 0, 0),\n    v::Vector3{T} = Vector3{T}(0, 0, 0),\n    F::Vector3{T} = Vector3{T}(0, 0, 0),\n    formal_charge::Int = 0,\n    charge::T = zero(T),\n    radius::T = zero(T),\n    properties::Properties = Properties(),\n    flags::Flags = Flags(),\n    frame_id::Int = 1\n    molecule_idx::MaybeInt = nothing,\n    chain_idx::MaybeInt = nothing,\n    fragment_idx::MaybeInt = nothing\n)\n\nCreates a new Atom{T} in the given atom container.\n\nAtom(\n    number::Int,\n    element::ElementType;\n    kwargs...\n)\n\nCreates a new Atom{Float32} in the default system. Supports the same keyword arguments as above.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.AtomTable","page":"Biomolecular systems","title":"BiochemicalAlgorithms.AtomTable","text":"AtomTable{T} <: AbstractSystemComponentTable{T}\n\nTables.jl-compatible representation of system atoms (or a subset thereof). Atom tables can be generated using atoms or filtered from other atom tables (via Base.filter).\n\nPublic columns\n\nidx::AbstractVector{Int}\nnumber::AbstractVector{Int}\nelement::AbstractVector{ElementType}\nname::AbstractVector{String}\natom_type::AbstractVector{String}\nr::AbstractVector{Vector3{T}}\nv::AbstractVector{Vector3{T}}\nF::AbstractVector{Vector3{T}}\nformal_charge::AbstractVector{Int}\ncharge::AbstractVector{T}\nradius::AbstractVector{T}\n\nPrivate columns\n\nproperties::AbstractVector{Properties}\nflags::AbstractVector{Flags}\nframe_id::AbstractVector{Int}\nmolecule_idx::AbstractVector{MaybeInt}\nchain_idx::AbstractVector{MaybeInt}\nfragment_idx::AbstractVector{MaybeInt}\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.atom_by_idx","page":"Biomolecular systems","title":"BiochemicalAlgorithms.atom_by_idx","text":"atom_by_idx(\n    sys::System{T} = default_system(),\n    idx::Int\n) -> Atom{T}\n\nReturns the Atom{T} associated with the given idx in sys. Throws a KeyError if no such atom exists.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.atom_by_name","page":"Biomolecular systems","title":"BiochemicalAlgorithms.atom_by_name","text":"atom_by_name(\n    ac::AbstractAtomContainer{T} = default_system(),\n    name::AbstractString\n) -> Union{Nothing, Atom{T}}\n\nReturns the first Atom{T} associated with the given name in ac. Returns nothing if no such atom exists.\n\nSupported keyword arguments\n\nframe_id::MaybeInt = 1: Any value other than nothing limits the result to atoms matching this frame ID.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.atoms","page":"Biomolecular systems","title":"BiochemicalAlgorithms.atoms","text":"atoms(::Chain)\natoms(::Fragment)\natoms(::Molecule)\natoms(::System = default_system())\n\nReturns an AtomTable{T} containing all atoms of the given atom container.\n\nSupported keyword arguments\n\nframe_id::MaybeInt = 1\nmolecule_idx::Union{MaybeInt, Some{Nothing}} = nothing\nchain_idx::Union{MaybeInt, Some{Nothing}} = nothing\nfragment_idx::Union{MaybeInt, Some{Nothing}} = nothing\n\nAll keyword arguments limit the results to atoms matching the given IDs. Keyword arguments set to nothing are ignored. You can use Some(nothing) to explicitly filter for ID values of nothing.\n\n\n\n\n\natoms(::ChainTable)\natoms(::FragmentTable)\natoms(::MoleculeTable)\n\nReturns an AtomTable{T} containing all atoms of the given table.\n\n\n\n\n\natoms(\n    substruct::Substructure{T, A} where A<:AbstractAtomContainer{T};\n    frame_id,\n    molecule_idx,\n    chain_idx,\n    secondary_structure_idx,\n    fragment_idx\n) -> SystemComponentTable{T, C} where {T, C<:Atom{T}}\n\n\nReturns an AtomTable for all of the given system's atoms matching the given criteria (value or missing). Fields given as nothing are ignored. The returned table contains all public and private atom fields.\n\n\n\n\n\natoms(\n    ab::AbstractAtomBijection\n) -> Tuple{AtomTable, AtomTable}\n\n\nReturns the tuple of atom tables represented by this bijection.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.is_bound_to","page":"Biomolecular systems","title":"BiochemicalAlgorithms.is_bound_to","text":"is_bound_to(a1::Atom, a2::Atom) -> Bool\n\n\nDecides if two atoms are bound to each other. Hydrogen bonds (has_flag(bond, :TYPE__HYDROGEN)) are ignored.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.is_geminal","page":"Biomolecular systems","title":"BiochemicalAlgorithms.is_geminal","text":"is_geminal(a1::Atom, a2::Atom) -> Union{Missing, Bool}\n\n\nDecides if two atoms are geminal.\n\nTwo atoms are geminal if they do not share a common bond but both have a bond to a third atom. For example the two hydrogen atoms in water are geminal. Hydrogen bonds (has_flag(bond, :TYPE__HYDROGEN)) are ignored.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.is_vicinal","page":"Biomolecular systems","title":"BiochemicalAlgorithms.is_vicinal","text":"is_vicinal(a1::Atom, a2::Atom) -> Bool\n\n\nDecides if two atoms are vicinal.\n\nTwo atoms are vicinal if they are separated by three bonds (1-4 position). Hydrogen bonds (has_flag(bond, :TYPE__HYDROGEN)) are ignored.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.natoms","page":"Biomolecular systems","title":"BiochemicalAlgorithms.natoms","text":"natoms(::Chain)\nnatoms(::Fragment)\nnatoms(::Molecule)\nnatoms(::System = default_system())\n\nReturns the number of atoms in the given atom container.\n\nSupported keyword arguments\n\nSee atoms\n\n\n\n\n\nnatoms(::AtomTable)\nnatoms(::ChainTable)\nnatoms(::FragmentTable)\nnatoms(::MoleculeTable)\n\nReturns the number of atoms in the given table.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.sort_atoms!","page":"Biomolecular systems","title":"BiochemicalAlgorithms.sort_atoms!","text":"sort_atoms!(::System)\n\nSorts the atoms in the given system by idx (default) or according to the given keyword arguments.\n\nSupported keyword arguments\n\nSame as Base.sort\n\n\n\n\n\n","category":"function"},{"location":"public/system/#Base.delete!-Tuple{Atom}","page":"Biomolecular systems","title":"Base.delete!","text":"delete!(::Atom)\ndelete!(::AtomTable)\ndelete!(::AtomTable, idx::Int)\n\nRemoves the given atom(s) and all associated bonds from the associated system.\n\n\n\n\n\n","category":"method"},{"location":"public/system/#Base.push!-Union{Tuple{T}, Tuple{System{T}, Atom{T}}} where T","page":"Biomolecular systems","title":"Base.push!","text":"push!(::Fragment{T},   ::Atom{T})\npush!(::Molecule{T},   ::Atom{T})\npush!(::System{T},     ::Atom{T})\n\nCreates a copy of the given atom in the given atom container. The new atom is automatically assigned a new idx.\n\nSupported keyword arguments\n\nSee atoms\n\n\n\n\n\n","category":"method"},{"location":"public/system/#Bonds","page":"Biomolecular systems","title":"Bonds","text":"","category":"section"},{"location":"public/system/","page":"Biomolecular systems","title":"Biomolecular systems","text":"Bond\nBondTable\nbond_by_idx\nbonds\nnbonds\nsort_bonds!\nBase.delete!(::Bond)\nBase.push!(::System{T}, ::Bond{T}) where T","category":"page"},{"location":"public/system/#BiochemicalAlgorithms.Bond","page":"Biomolecular systems","title":"BiochemicalAlgorithms.Bond","text":"Bond{T} <: AbstractAtomContainer{T}\n\nMutable representation of an individual bond in a system.\n\nPublic fields\n\nidx::Int\na1::Int\na2::Int\norder::BondOrderType\n\nPrivate fields\n\nproperties::Properties\nflags::Flags\n\nConstructors\n\nBond(\n    ac::AbstractAtomContainer{T} = default_system(),\n    a1::Int,\n    a2::Int,\n    order::BondOrderType;\n    # keyword arguments\n    properties::Properties = Properties(),\n    flags::Flags = Flags()\n)\n\nCreates a new Bond{T} in the given (atom container's) system.\n\nBond(\n    a1::Atom{T},\n    a2::Atom{T},\n    order::BondOrderType;\n    # keyword arguments\n    properties::Properties = Properties(),\n    flags::Flags = Flags()\n)\n\nCreates a new Bond{T} for the given atoms. Both atoms must belong to the same system.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.BondTable","page":"Biomolecular systems","title":"BiochemicalAlgorithms.BondTable","text":"BondTable{T} <: AbstractSystemComponentTable{T}\n\nTables.jl-compatible representation of system bonds (or a subset thereof). Bond tables can be generated using bonds or filtered from other bond tables (via Base.filter).\n\nPublic columns\n\nidx::AbstractVector{Int}\na1::AbstractVector{Int}\na2::AbstractVector{Int}\norder::AbstractVector{BondOrderType}\n\nPrivate columns\n\nproperties::AbstractVector{Properties}\nflags::AbstractVector{Flags}\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.bond_by_idx","page":"Biomolecular systems","title":"BiochemicalAlgorithms.bond_by_idx","text":"bond_by_idx(\n    sys::System{T} = default_system(),\n    idx::Int\n) -> Bond{T}\n\nReturns the Bond{T} associated with the given idx in sys. Throws a KeyError if no such bond exists.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.bonds","page":"Biomolecular systems","title":"BiochemicalAlgorithms.bonds","text":"bonds(::Atom)\nbonds(::AtomTable)\n\nReturns a BondTable{T} containing all bonds of the given atom(s).\n\n\n\n\n\nbonds(::Chain)\nbonds(::Fragment)\nbonds(::Molecule)\nbonds(::System = default_system())\n\nReturns a BondTable{T} containing all bonds of the given atom container where at least one associated atom is contained in the same container.\n\nSupported keyword arguments\n\nSee atoms\n\n\n\n\n\nbonds(::ChainTable)\nbonds(::FragmentTable)\nbonds(::MoleculeTable)\n\nReturns a BondTable{T} containing all bonds where at least one associated atom belongs to the given table.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.nbonds","page":"Biomolecular systems","title":"BiochemicalAlgorithms.nbonds","text":"nbonds(::Atom)\nnbonds(::AtomTable)\n\nReturns the number of bonds of the given atom(s).\n\n\n\n\n\nnbonds(::Chain)\nnbonds(::Fragment)\nnbonds(::Molecule)\nnbonds(::System = default_system())\n\nReturns the number of bonds in the given atom container where at least one associated atom is contained in the same container.\n\nSupported keyword arguments\n\nSee atoms\n\n\n\n\n\nnbonds(::BondTable)\nnbonds(::ChainTable)\nnbonds(::FragmentTable)\nnbonds(::MoleculeTable)\n\nReturns the number of bonds where at least one associated atom belongs to the given table.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.sort_bonds!","page":"Biomolecular systems","title":"BiochemicalAlgorithms.sort_bonds!","text":"sort_bonds!(::System)\n\nSorts the bonds in the given system by idx (default) or according to the given keyword arguments.\n\nSupported keyword arguments\n\nSame as Base.sort\n\n\n\n\n\n","category":"function"},{"location":"public/system/#Base.delete!-Tuple{Bond}","page":"Biomolecular systems","title":"Base.delete!","text":"delete!(::Bond)\ndelete!(::BondTable)\ndelete!(::BondTable, idx::Int)\n\nRemoves the given bond(s) from the associated system.\n\n\n\n\n\n","category":"method"},{"location":"public/system/#Base.push!-Union{Tuple{T}, Tuple{System{T}, Bond{T}}} where T","page":"Biomolecular systems","title":"Base.push!","text":"push!(::AbstractAtomContainer, ::Bond{T})\n\nCreates a copy of the given bond in the system associated with the given atom container. The new bond is automatically assigned a new idx.\n\n\n\n\n\n","category":"method"},{"location":"public/system/#Molecules","page":"Biomolecular systems","title":"Molecules","text":"","category":"section"},{"location":"public/system/","page":"Biomolecular systems","title":"Biomolecular systems","text":"MoleculeVariant\nMoleculeVariantType","category":"page"},{"location":"public/system/#BiochemicalAlgorithms.MoleculeVariant","page":"Biomolecular systems","title":"BiochemicalAlgorithms.MoleculeVariant","text":"@enumx MoleculeVariant begin\n    None = 1\n    Protein = 2\nend\n\nEnum representing variants of molecules\n\nExample\n\njulia> prot = Protein(System())\nMolecule{Float32}: (idx = 1, name = \"\")\n\njulia> isprotein(prot)\ntrue\n\njulia> prot.variant == MoleculeVariant.Protein\ntrue\n\n\n\n\n\n","category":"module"},{"location":"public/system/#BiochemicalAlgorithms.MoleculeVariantType","page":"Biomolecular systems","title":"BiochemicalAlgorithms.MoleculeVariantType","text":"const MoleculeVariantType = MoleculeVariant.T\n\nType of MoleculeVariant enumerators\n\n\n\n\n\n","category":"type"},{"location":"public/system/#Molecules-(all-variants)","page":"Biomolecular systems","title":"Molecules (all variants)","text":"","category":"section"},{"location":"public/system/","page":"Biomolecular systems","title":"Biomolecular systems","text":"Molecule\nMoleculeTable\nmolecule_by_idx\nmolecules\nnmolecules\nparent_molecule\nsort_molecules!\nBase.delete!(::Molecule)\nBase.push!(::System{T}, ::Molecule{T}) where T","category":"page"},{"location":"public/system/#BiochemicalAlgorithms.Molecule","page":"Biomolecular systems","title":"BiochemicalAlgorithms.Molecule","text":"Molecule{T} <: AbstractAtomContainer{T}\n\nMutable representation of an individual molecule in a system.\n\nPublic fields\n\nidx::Int\nname::String\n\nPrivate fields\n\nvariant::MoleculeVariantType\nproperties::Properties\nflags::Flags\n\nConstructors\n\nMolecule(\n    sys::System{T};\n    # keyword arguments\n    name::AbstractString = \"\",\n    variant::MoleculeVariantType = MoleculeVariant.None,\n    properties::Properties = Properties(),\n    flags::Flags = Flags()\n)\n\nCreates a new Molecule{T} in the given system.\n\nMolecule(;\n    #keyword arguments\n    name::AbstractString = \"\",\n    variant::MoleculeVariantType = MoleculeVariant.None,\n    properties::Properties = Properties(),\n    flags::Flags = Flags()\n)\n\nCreates a new Molecule{Float32} in the default system.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.MoleculeTable","page":"Biomolecular systems","title":"BiochemicalAlgorithms.MoleculeTable","text":"MoleculeTable{T} <: AbstractSystemComponentTable{T}\n\nTables.jl-compatible representation of system molecules (or a subset thereof). Molecule tables can be generated using molecules or filtered from other molecule tables (via Base.filter).\n\nPublic columns\n\nidx::AbstractVector{Int}\nname::AbstractVector{String}\n\nPrivate columns\n\nvariant::AbstractVector{MoleculeVariantType}\nproperties::AbstractVector{Properties}\nflags::AbstractVector{Flags}\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.molecule_by_idx","page":"Biomolecular systems","title":"BiochemicalAlgorithms.molecule_by_idx","text":"molecule_by_idx(\n    sys::System{T} = default_system(),\n    idx::Int\n) -> Molecule{T}\n\nReturns the Molecule{T} associated with the given idx in sys. Throws a KeyError if no such molecule exists.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.molecules","page":"Biomolecular systems","title":"BiochemicalAlgorithms.molecules","text":"molecules(::System{T} = default_system())\n\nReturns a MoleculeTable{T} containing all molecules of the given system.\n\nSupported keyword arguments\n\nvariant::Union{Nothing, MoleculeVariantType} = nothing\n\nThe keyword argument limits the results to molecules matching the given variant type. Keyword arguments set to nothing are ignored.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.nmolecules","page":"Biomolecular systems","title":"BiochemicalAlgorithms.nmolecules","text":"nmolecules(::System = default_system())\n\nReturns the number of molecules in the given system.\n\nSupported keyword arguments\n\nSee molecules\n\n\n\n\n\nnmolecules(::MoleculeTable)\n\nReturns the number of molecules in the given table.\n\nSupported keyword arguments\n\nSee molecules\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.parent_molecule","page":"Biomolecular systems","title":"BiochemicalAlgorithms.parent_molecule","text":"parent_molecule(::Atom)\nparent_molecule(::Chain)\nparent_molecule(::Fragment)\n\nReturns the Molecule{T} containing the given object. Returns nothing if no such molecule exists.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.sort_molecules!","page":"Biomolecular systems","title":"BiochemicalAlgorithms.sort_molecules!","text":"sort_molecules!(::System)\n\nSorts the molecules in the given system by idx (default) or according to the given keyword arguments.\n\nSupported keyword arguments\n\nSame as Base.sort\n\n\n\n\n\n","category":"function"},{"location":"public/system/#Base.delete!-Tuple{Molecule}","page":"Biomolecular systems","title":"Base.delete!","text":"delete!(::Molecule)\ndelete!(::MoleculeTable)\ndelete!(::MoleculeTable, idx::Int)\n\nRemoves the given molecule(s) and all associated chains, secondary_structures and fragments from the associated system.\n\nSupported keyword arguments\n\nkeep_atoms::Bool = false Determines whether associated atoms (and their bonds) are removed as well\n\n\n\n\n\n","category":"method"},{"location":"public/system/#Base.push!-Union{Tuple{T}, Tuple{System{T}, Molecule{T}}} where T","page":"Biomolecular systems","title":"Base.push!","text":"push!(::System{T}, ::Molecule{T})\n\nCreates a copy of the given molecule in the given system. The new molecule is automatically assigned a new idx.\n\n\n\n\n\n","category":"method"},{"location":"public/system/#Proteins-(MoleculeVariant.Protein)","page":"Biomolecular systems","title":"Proteins (MoleculeVariant.Protein)","text":"","category":"section"},{"location":"public/system/","page":"Biomolecular systems","title":"Biomolecular systems","text":"Protein\nisprotein\nnproteins\nparent_protein\nprotein_by_idx\nproteins","category":"page"},{"location":"public/system/#BiochemicalAlgorithms.Protein","page":"Biomolecular systems","title":"BiochemicalAlgorithms.Protein","text":"Protein(sys::System = default_system())\n\nMolecule constructor defaulting to the MoleculeVariant.Protein variant.\n\nSupported keyword arguments\n\nSee Molecule\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.isprotein","page":"Biomolecular systems","title":"BiochemicalAlgorithms.isprotein","text":"isprotein(mol::Molecule) -> Bool\n\n\nReturns true if the given molecule is a MoleculeVariant.Protein, false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.nproteins","page":"Biomolecular systems","title":"BiochemicalAlgorithms.nproteins","text":"nproteins(::System = default_system())\n\nReturns the number of MoleculeVariant.Protein molecules in the given system.\n\nSupported keyword arguments\n\nSee molecules\n\n\n\n\n\nnproteins(::MoleculeTable)\n\nReturns the number of MoleculeVariant.Protein molecules in the given table.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.parent_protein","page":"Biomolecular systems","title":"BiochemicalAlgorithms.parent_protein","text":"parent_protein(::Atom)\nparent_protein(::Chain)\nparent_protein(::Fragment)\n\nReturns the Molecule{T} containing the given object. Returns nothing if no such molecule exists or if the molecule is not a MoleculeVariant.Protein.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.protein_by_idx","page":"Biomolecular systems","title":"BiochemicalAlgorithms.protein_by_idx","text":"protein_by_idx(\n    sys::System{T} = default_system(),\n    idx::Int\n) -> Molecule{T}\n\nReturns the Molecule{T} associated with the given idx in sys. Throws a KeyError if no such molecule exists or if the molecule is not a MoleculeVariant.Protein.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.proteins","page":"Biomolecular systems","title":"BiochemicalAlgorithms.proteins","text":"proteins(::System{T} = default_system())\n\nReturns a MoleculeTable{T} containing all MoleculeVariant.Protein molecules of the given system.\n\nSupported keyword arguments\n\nSee molecules\n\n\n\n\n\n","category":"function"},{"location":"public/system/#Chains","page":"Biomolecular systems","title":"Chains","text":"","category":"section"},{"location":"public/system/","page":"Biomolecular systems","title":"Biomolecular systems","text":"Chain\nChainTable\nchain_by_idx\nchains\nnchains\nparent_chain\nsort_chains!\nBase.delete!(::Chain)\nBase.push!(::Molecule{T}, ::Chain{T}) where T","category":"page"},{"location":"public/system/#BiochemicalAlgorithms.Chain","page":"Biomolecular systems","title":"BiochemicalAlgorithms.Chain","text":"Chain{T} <: AbstractAtomContainer{T}\n\nMutable representation of an individual chain in a system.\n\nPublic fields\n\nidx::Int\nname::String\n\nPrivate fields\n\nproperties::Properties\nflags::Flags\nmolecule_idx::Int\n\nConstructors\n\nChain(\n    mol::Molecule{T};\n    # keyword arguments\n    name::AbstractString = \"\",\n    properties::Properties = Properties(),\n    flags::Flags = Flags()\n)\n\nCreates a new Chain{T} in the given molecule.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.ChainTable","page":"Biomolecular systems","title":"BiochemicalAlgorithms.ChainTable","text":"ChainTable{T} <: AbstractSystemComponentTable{T}\n\nTables.jl-compatible representation of system chains (or a subset thereof). Chain tables can be generated using chains or filtered from other chain tables (via Base.filter).\n\nPublic columns\n\nidx::AbstractVector{Int}\nname::AbstractVector{String}\n\nPrivate columns\n\nproperties::AbstractVector{Properties}\nflags::AbstractVector{Flags}\nmolecule_idx::AbstractVector{Int}\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.chain_by_idx","page":"Biomolecular systems","title":"BiochemicalAlgorithms.chain_by_idx","text":"chain_by_idx(\n    sys::System{T} = default_system(),\n    idx::Int\n) -> Chain{T}\n\nReturns the Chain{T} associated with the given idx in sys. Throws a KeyError if no such chain exists.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.chains","page":"Biomolecular systems","title":"BiochemicalAlgorithms.chains","text":"chains(::Molecule)\nchains(::System = default_system(); kwargs...)\n\nReturns a ChainTable{T} containing all chains of the given atom container.\n\nSupported keyword arguments\n\nmolecule_idx::MaybeInt = nothing: Any value other than nothing limits the result to chains belonging to the molecule with the given ID.\n\n\n\n\n\nchains(::MoleculeTable)\n\nReturns a ChainTable{T} containing all chains of the given molecule table.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.nchains","page":"Biomolecular systems","title":"BiochemicalAlgorithms.nchains","text":"nchains(::Molecule)\nnchains(::System = default_system(); kwargs...)\n\nReturns the number of chains in the given atom container.\n\nSupported keyword arguments\n\nSee chains\n\n\n\n\n\nnchains(::ChainTable)\nnchains(::MolculeTable)\n\nReturns the number of chains belonging to the given molecule table.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.parent_chain","page":"Biomolecular systems","title":"BiochemicalAlgorithms.parent_chain","text":"parent_chain(::Atom)\nparent_chain(::Fragment)\n\nReturns the Chain{T} containing the given object. Returns nothing if no such chain exists.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.sort_chains!","page":"Biomolecular systems","title":"BiochemicalAlgorithms.sort_chains!","text":"sort_chains!(::System)\n\nSorts the chains in the given system by idx (default) or according to the given keyword arguments.\n\nSupported keyword arguments\n\nSame as Base.sort\n\n\n\n\n\n","category":"function"},{"location":"public/system/#Base.delete!-Tuple{Chain}","page":"Biomolecular systems","title":"Base.delete!","text":"delete!(::Chain)\ndelete!(::ChainTable)\ndelete!(::ChainTable, idx::Int)\n\nRemoves the given chain(s) and all associated secondary structures and fragments from the associated system.\n\nSupported keyword arguments\n\nkeep_atoms::Bool = false Determines whether associated atoms (and their bonds) are removed as well\n\n\n\n\n\n","category":"method"},{"location":"public/system/#Base.push!-Union{Tuple{T}, Tuple{Molecule{T}, Chain{T}}} where T","page":"Biomolecular systems","title":"Base.push!","text":"push!(::Molecule{T}, ::Chain{T})\n\nCreates a copy of the given chain in the given molecule. The new chain is automatically assigned a new idx.\n\n\n\n\n\n","category":"method"},{"location":"public/system/#Secondary-structures","page":"Biomolecular systems","title":"Secondary structures","text":"","category":"section"},{"location":"public/system/","page":"Biomolecular systems","title":"Biomolecular systems","text":"SecondaryStructure\nSecondaryStructureTable\nsecondary_structure_by_idx\nsecondary_structures\nnsecondary_structures\nparent_secondary_structure\nsort_secondary_structures!\nBase.delete!(::SecondaryStructure)\nBase.push!(::Chain{T}, ::SecondaryStructure{T}) where T","category":"page"},{"location":"public/system/#BiochemicalAlgorithms.SecondaryStructure","page":"Biomolecular systems","title":"BiochemicalAlgorithms.SecondaryStructure","text":"SecondaryStructure{T} <: AbstractAtomContainer{T}\n\nMutable representation of an individual secondary structure element in a Chain.\n\nPublic fields\n\nidx::Int\nnumber::Int\ntype::SecondaryStructureType\nname::String\n\nPrivate fields\n\nproperties::Properties\nflags::Flags\nmolecule_idx::Int\nchain_idx::Int\n\nConstructors\n\nSecondaryStructure(\n    chain::Chain{T};\n    number::Int,\n    type::SecondaryStructureType;\n    # keyword arguments\n    name::AbstractString = \"\",\n    properties::Properties = Properties(),\n    flags::Flags = Flags()\n)\n\nCreates a new SecondaryStructure{T} in the given chain.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.SecondaryStructureTable","page":"Biomolecular systems","title":"BiochemicalAlgorithms.SecondaryStructureTable","text":"SecondaryStructureTable{T} <: AbstractSystemComponentTable{T}\n\nTables.jl-compatible representation of system secondary structures (or a subset thereof). Secondary structure tables can be generated using secondary_structures or filtered from other secondary structure tables (via Base.filter).\n\nPublic columns\n\nidx::AbstractVector{Int}\nnumber::Int\ntype::SecondaryStructureType\nname::AbstractVector{String}\n\nPrivate columns\n\nproperties::AbstractVector{Properties}\nflags::AbstractVector{Flags}\nmolecule_idx::AbstractVector{Int}\nchain_idx::AbstractVector{Int}\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.secondary_structure_by_idx","page":"Biomolecular systems","title":"BiochemicalAlgorithms.secondary_structure_by_idx","text":"secondary_structure_by_idx(\n    sys::System{T},\n    idx::Int64\n) -> SecondaryStructure\n\n\nReturns the SecondaryStructure{T} associated with the given idx in sys. Throws a KeyError if no such secondary structure exists.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.secondary_structures","page":"Biomolecular systems","title":"BiochemicalAlgorithms.secondary_structures","text":"secondary_structures(::Molecule)\nsecondary_structures(::Chain)\nsecondary_structures(::System; kwargs...)\n\nReturns a SecondaryStructureTable{T} containing all secondary structures of the given atom container.\n\nSupported keyword arguments\n\nmolecule_idx::MaybeInt = nothing\nchain_idx::MaybeInt = nothing\n\nAll keyword arguments limit the results to secondary structures matching the given IDs. Keyword arguments set to nothing are ignored.\n\n\n\n\n\nsecondary_structures(::ChainTable)\nsecondary_structures(::MoleculeTable)\n\nReturns a SecondaryStructureTable{T} containing all secondary structures of the given table.\n\nSupported keyword arguments\n\nSee secondary_structures\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.nsecondary_structures","page":"Biomolecular systems","title":"BiochemicalAlgorithms.nsecondary_structures","text":"nsecondary_structures(::Chain)\nnsecondary_structures(::Molecule)\nnsecondary_structures(::System; kwargs...)\n\nReturns the number of secondary structures in the given atom container.\n\nSupported keyword arguments\n\nSee secondary_structures\n\n\n\n\n\nnsecondary_structures(::ChainTable)\nnsecondary_structures(::SecondaryStructureTable)\nnsecondary_structures(::MoleculeTable)\n\nReturns the number of secondary_structures belonging to the given table.\n\nSupported keyword arguments\n\nSee secondary_structures\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.parent_secondary_structure","page":"Biomolecular systems","title":"BiochemicalAlgorithms.parent_secondary_structure","text":"parent_secondary_structure(::Atom)\nparent_secondary_structure(::Fragment)\nparent_secondary_structure(::Nucleotide)\nparent_secondary_structure(::Residue)\n\nReturns the SecondaryStructure{T} containing the given object. Returns nothing if no such secondary structure exists.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.sort_secondary_structures!","page":"Biomolecular systems","title":"BiochemicalAlgorithms.sort_secondary_structures!","text":"sort_secondary_structures!(::System)\n\nSorts the secondary structures in the given system by idx (default) or according to the given keyword arguments.\n\nSupported keyword arguments\n\nSame as Base.sort\n\n\n\n\n\n","category":"function"},{"location":"public/system/#Base.delete!-Tuple{SecondaryStructure}","page":"Biomolecular systems","title":"Base.delete!","text":"delete!(::SecondaryStructure; keep_fragments::Bool = false)\ndelete!(::SecondaryStructureTable; keep_fragments::Bool = false)\ndelete!(::SecondaryStructureTable, idx::Int; keep_fragments::Bool = false)\n\nRemoves the given secondary_structure(s) from the associated system.\n\nSupported keyword arguments\n\nkeep_fragments::Bool = false  Determines whether the fragments contained in this secondary structure are removed as well. All atoms contained in those  fragments are deleted as well.\n\n\n\n\n\n","category":"method"},{"location":"public/system/#Base.push!-Union{Tuple{T}, Tuple{Chain{T}, SecondaryStructure{T}}} where T","page":"Biomolecular systems","title":"Base.push!","text":"push!(::Chain{T}, ::SecondaryStructure{T})\n\nCreates a copy of the given secondary structure in the given chain. The new secondary structure is automatically assigned a new idx.\n\n\n\n\n\n","category":"method"},{"location":"public/system/#Fragments","page":"Biomolecular systems","title":"Fragments","text":"","category":"section"},{"location":"public/system/","page":"Biomolecular systems","title":"Biomolecular systems","text":"FragmentVariant\nFragmentVariantType","category":"page"},{"location":"public/system/#BiochemicalAlgorithms.FragmentVariant","page":"Biomolecular systems","title":"BiochemicalAlgorithms.FragmentVariant","text":"@enumx FragmentVariant begin\n    None = 1\n    Residue = 2\n    Nucleotide = 3\nend\n\nEnum representing variants of fragments\n\nExample\n\njulia> res = Residue(Chain(Molecule(System())), 1; name = \"ALA\")\nFragment{Float32}: (idx = 3, number = 1, name = \"ALA\")\n\njulia> isresidue(res)\ntrue\n\njulia> res.variant == FragmentVariant.Residue\ntrue\n\n\n\n\n\n","category":"module"},{"location":"public/system/#BiochemicalAlgorithms.FragmentVariantType","page":"Biomolecular systems","title":"BiochemicalAlgorithms.FragmentVariantType","text":"const FragmentVariantType = FragmentVariant.T\n\nType of FragmentVariant enumerators\n\n\n\n\n\n","category":"type"},{"location":"public/system/#Fragments-(all-variants)","page":"Biomolecular systems","title":"Fragments (all variants)","text":"","category":"section"},{"location":"public/system/","page":"Biomolecular systems","title":"Biomolecular systems","text":"Fragment\nFragmentTable\nfragment_by_idx\nfragments\nnfragments\nparent_fragment\nsort_fragments!\nBase.delete!(::Fragment)\nBase.push!(::SecondaryStructure{T}, ::Fragment{T}) where T\nBase.push!(::Chain{T}, ::Fragment{T}) where T","category":"page"},{"location":"public/system/#BiochemicalAlgorithms.Fragment","page":"Biomolecular systems","title":"BiochemicalAlgorithms.Fragment","text":"Fragment{T} <: AbstractAtomContainer{T}\n\nMutable representation of an individual fragment in a system.\n\nPublic fields\n\nidx::Int\nnumber::Int\nname::String\n\nPrivate fields\n\nvariant::FragmentVariantType\nproperties::Properties\nflags::Flags\nmolecule_idx::Int\nchain_idx::Int\nsecondary_structure_idx::Int\n\nConstructors\n\nFragment(\n    chain::Chain{T},\n    number::Int;\n    # keyword arguments\n    name::AbstractString = \"\",\n    variant::FragmentVariantType = FragmentVariant.None,\n    properties::Properties = Properties(),\n    flags::Flags = Flags()\n)\n\nCreates a new Fragment{T} in the given chain.\n\nFragment(\n    secondary_structure::SecondaryStructure{T},\n    number::Int;\n    # keyword arguments\n    name::AbstractString = \"\",\n    variant::FragmentVariantType = FragmentVariant.None,\n    properties::Properties = Properties(),\n    flags::Flags = Flags()\n)\n\nCreates a new Fragment{T} in the given secondary structure.\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.FragmentTable","page":"Biomolecular systems","title":"BiochemicalAlgorithms.FragmentTable","text":"FragmentTable{T} <: AbstractSystemComponentTable{T}\n\nTables.jl-compatible representation of system fragments (or a subset thereof). Fragment tables can be generated using fragments or filtered from other fragment tables (via Base.filter).\n\nPublic columns\n\nidx::AbstractVector{Int}\nnumber::AbstractVector{Int}\nname::AbstractVector{String}\n\nPrivate columns\n\nvariant::AbstractVector{FragmentVariantType}\nproperties::AbstractVector{Properties}\nflags::AbstractVector{Flags}\nmolecule_idx::AbstractVector{Int}\nchain_idx::AbstractVector{Int}\n\n\n\n\n\n","category":"type"},{"location":"public/system/#BiochemicalAlgorithms.fragment_by_idx","page":"Biomolecular systems","title":"BiochemicalAlgorithms.fragment_by_idx","text":"fragment_by_idx(\n    sys::System{T} = default_system(),\n    idx::Int\n) -> Fragment{T}\n\nReturns the Fragment{T} associated with the given idx in sys. Throws a KeyError if no such fragment exists.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.fragments","page":"Biomolecular systems","title":"BiochemicalAlgorithms.fragments","text":"fragments(::Chain)\nfragments(::SecondaryStructure)\nfragments(::Molecule)\nfragments(::System = default_system())\n\nReturns a FragmentTable{T} containing all fragments of the given atom container.\n\nSupported keyword arguments\n\nvariant::Union{Nothing, FragmentVariantType} = nothing\nmolecule_idx::MaybeInt = nothing\nchain_idx::MaybeInt = nothing\nsecondary_structure_idx::MaybeInt = nothing\n\nAll keyword arguments limit the results to fragments matching the given IDs or variant type. Keyword arguments set to nothing are ignored.\n\n\n\n\n\nfragments(::SecondaryStructureTable)\nfragments(::ChainTable)\nfragments(::MoleculeTable)\n\nReturns a FragmentTable{T} containing all fragments of the given table.\n\nSupported keyword arguments\n\nvariant::Union{Nothing, FragmentVariantType} = nothing Any value other than nothing limits the results to the matching variant type.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.nfragments","page":"Biomolecular systems","title":"BiochemicalAlgorithms.nfragments","text":"nfragments(::Chain)\nnfragments(::SecondaryStructure)\nnfragments(::Molecule)\nnfragments(::System = default_system())\n\nReturns the number of fragments in the given atom container.\n\nSupported keyword arguments\n\nSee fragments\n\n\n\n\n\nnfragments(::ChainTable)\nnfragments(::FragmentTable)\nnfragments(::MoleculeTable)\n\nReturns the number of fragments belonging to the given table.\n\nSupported keyword arguments\n\nSee fragments\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.parent_fragment","page":"Biomolecular systems","title":"BiochemicalAlgorithms.parent_fragment","text":"parent_fragment(::Atom)\n\nReturns the Fragment{T} containing the given atom. Returns nothing if no such fragment exists.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.sort_fragments!","page":"Biomolecular systems","title":"BiochemicalAlgorithms.sort_fragments!","text":"sort_fragments!(::System)\n\nSorts the fragments in the given system by idx (default) or according to the given keyword arguments.\n\nSupported keyword arguments\n\nSame as Base.sort\n\n\n\n\n\n","category":"function"},{"location":"public/system/#Base.delete!-Tuple{Fragment}","page":"Biomolecular systems","title":"Base.delete!","text":"delete!(::Fragment)\ndelete!(::FragmentTable)\ndelete!(::FragmentTable, idx::Int)\n\nRemoves the given fragment(s) from the associated system.\n\nSupported keyword arguments\n\nkeep_atoms::Bool = false Determines whether associated atoms (and their bonds) are removed as well\n\n\n\n\n\n","category":"method"},{"location":"public/system/#Base.push!-Union{Tuple{T}, Tuple{SecondaryStructure{T}, Fragment{T}}} where T","page":"Biomolecular systems","title":"Base.push!","text":"push!(::SecondaryStructure{T}, ::Fragment{T})\n\nCreates a copy of the given fragment in the given SecondaryStructure. The new fragment is automatically assigned a new idx.\n\n\n\n\n\n","category":"method"},{"location":"public/system/#Base.push!-Union{Tuple{T}, Tuple{Chain{T}, Fragment{T}}} where T","page":"Biomolecular systems","title":"Base.push!","text":"push!(::Chain{T}, ::Fragment{T})\n\nCreates a copy of the given fragment in the given chain. The new fragment is automatically assigned a new idx.\n\n\n\n\n\n","category":"method"},{"location":"public/system/#Nucleotides-(FragmentVariant.Nucleotide)","page":"Biomolecular systems","title":"Nucleotides (FragmentVariant.Nucleotide)","text":"","category":"section"},{"location":"public/system/","page":"Biomolecular systems","title":"Biomolecular systems","text":"Nucleotide\nisnucleotide\nnnucleotides\nnucleotide_by_idx\nnucleotides\nparent_nucleotide","category":"page"},{"location":"public/system/#BiochemicalAlgorithms.Nucleotide","page":"Biomolecular systems","title":"BiochemicalAlgorithms.Nucleotide","text":"Nucleotide(chain::Chain, number::Int)\n\nFragment constructor defaulting to the FragmentVariant.Nucleotide variant.\n\nSupported keyword arguments\n\nSee Fragment\n\n\n\n\n\nNucleotide(ss::SecondaryStructure, number::Int)\n\nFragment constructor defaulting to the FragmentVariant.Nucleotide variant.\n\nSupported keyword arguments\n\nSee Fragment\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.isnucleotide","page":"Biomolecular systems","title":"BiochemicalAlgorithms.isnucleotide","text":"isnucleotide(frag::Fragment) -> Bool\n\n\nReturns true if the given fragment is a FragmentVariant.Nucleotide, false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.nnucleotides","page":"Biomolecular systems","title":"BiochemicalAlgorithms.nnucleotides","text":"nnucleotides(::Chain)\nnnucleotides(::SecondaryStructure)\nnnucleotides(::Molecule)\nnnucleotides(::System = default_system())\n\nReturns the number of FragmentVariant.Nucleotide fragments in the given atom container.\n\nSupported keyword arguments\n\nSee fragments\n\n\n\n\n\nnnucleotides(::ChainTable)\nnnucleotides(::SecondaryStructureTable)\nnnucleotides(::FragmentTable)\nnnucleotides(::MoleculeTable)\n\nReturns the number of FragmentVariant.Nucleotide fragments in the given table.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.nucleotide_by_idx","page":"Biomolecular systems","title":"BiochemicalAlgorithms.nucleotide_by_idx","text":"nucleotide_by_idx(\n    sys::System{T} = default_system(),\n    idx::Int\n) -> Fragment{T}\n\nReturns the Fragment{T} associated with the given idx in sys. Throws a KeyError if no such fragment exists or if the fragment is not a FragmentVariant.Nucleotide.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.nucleotides","page":"Biomolecular systems","title":"BiochemicalAlgorithms.nucleotides","text":"nucleotides(::Chain)\nnucleotides(::ChainTable)\nnucleotides(::SecondaryStructure)\nnucleotides(::SecondaryStructureTable)\nnucleotides(::Molecule)\nnucleotides(::MoleculeTable)\nnucleotides(::System = default_system())\n\nReturns a FragmentTable{T} containing all FragmentVariant.Nucleotide fragments of the given atom container or table.\n\nSupported keyword arguments\n\nSee fragments\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.parent_nucleotide","page":"Biomolecular systems","title":"BiochemicalAlgorithms.parent_nucleotide","text":"parent_nucleotide(::Atom)\n\nReturns the Fragment{T} containing the given atom. Returns nothing if no such fragment exists or if the fragment is not a FragmentVariant.Nucleotide.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#Nucleotides-(FragmentVariant.Residue)","page":"Biomolecular systems","title":"Nucleotides (FragmentVariant.Residue)","text":"","category":"section"},{"location":"public/system/","page":"Biomolecular systems","title":"Biomolecular systems","text":"Residue\nisresidue\nnresidues\nparent_residue\nresidue_by_idx\nresidues","category":"page"},{"location":"public/system/#BiochemicalAlgorithms.Residue","page":"Biomolecular systems","title":"BiochemicalAlgorithms.Residue","text":"Residue(chain::Chain, number::Int)\n\nFragment constructor defaulting to the FragmentVariant.Residue variant.\n\nSupported keyword arguments\n\nSee Fragment\n\n\n\n\n\nResidue(ss::SecondaryStructure, number::Int)\n\nFragment constructor defaulting to the FragmentVariant.Residue variant.\n\nSupported keyword arguments\n\nSee Fragment\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.isresidue","page":"Biomolecular systems","title":"BiochemicalAlgorithms.isresidue","text":"isresidue(frag::Fragment) -> Bool\n\n\nReturns true if the given fragment is a FragmentVariant.Residue, false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.nresidues","page":"Biomolecular systems","title":"BiochemicalAlgorithms.nresidues","text":"nresidues(::Chain)\nnresidues(::SecondaryStructure)\nnresidues(::Molecule)\nnresidues(::System = default_system())\n\nReturns the number of FragmentVariant.Residue fragments in the given atom container.\n\nSupported keyword arguments\n\nSee fragments\n\n\n\n\n\nnresidues(::ChainTable)\nnresidues(::SecondaryStructureTable)\nnresidues(::FragmentTable)\nnresidues(::MoleculeTable)\n\nReturns the number of FragmentVariant.Residue fragments in the given table.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.parent_residue","page":"Biomolecular systems","title":"BiochemicalAlgorithms.parent_residue","text":"parent_residue(::Atom)\n\nReturns the Fragment{T} containing the given atom. Returns nothing if no such fragment exists or if the fragment is not a FragmentVariant.Residue.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.residue_by_idx","page":"Biomolecular systems","title":"BiochemicalAlgorithms.residue_by_idx","text":"residue_by_idx(\n    sys::System{T} = default_system(),\n    idx::Int\n) -> Fragment{T}\n\nReturns the Fragment{T} associated with the given idx in sys. Throws a KeyError if no such fragment exists or if the fragment is not a FragmentVariant.Residue.\n\n\n\n\n\n","category":"function"},{"location":"public/system/#BiochemicalAlgorithms.residues","page":"Biomolecular systems","title":"BiochemicalAlgorithms.residues","text":"residues(::Chain)\nresidues(::ChainTable)\nresidues(::SecondaryStructure)\nresidues(::SecondaryStructureTable)\nresidues(::Molecule)\nresidues(::MoleculeTable)\nresidues(::System = default_system())\n\nReturns a FragmentTable{T} containing all FragmentVariant.Residue fragments of the given atom container or table.\n\nSupported keyword arguments\n\nSee fragments\n\n\n\n\n\n","category":"function"},{"location":"public/fileformats/#File-formats","page":"File formats","title":"File formats","text":"","category":"section"},{"location":"public/fileformats/","page":"File formats","title":"File formats","text":"CurrentModule = BiochemicalAlgorithms","category":"page"},{"location":"public/fileformats/","page":"File formats","title":"File formats","text":"Pages = [\"fileformats.md\"]","category":"page"},{"location":"public/fileformats/#BALL-INI-files","page":"File formats","title":"BALL INI files","text":"","category":"section"},{"location":"public/fileformats/","page":"File formats","title":"File formats","text":"read_ball_ini_file","category":"page"},{"location":"public/fileformats/#BiochemicalAlgorithms.read_ball_ini_file","page":"File formats","title":"BiochemicalAlgorithms.read_ball_ini_file","text":"read_ball_ini_file(fname::AbstractString, ::Type{T} = Float32) -> BALLIniFile\n\nRead a file in BALL's old Ini file format and return it as a BALLIniFile.\n\nSupported keyword arguments\n\ncleanup_keys::Bool = true simplifies colon-separated key names (e.g., ver:version becomes version, key:I becomes I, etc.)\n\n\n\n\n\n","category":"function"},{"location":"public/fileformats/#HyperChem-HIN-files","page":"File formats","title":"HyperChem HIN files","text":"","category":"section"},{"location":"public/fileformats/","page":"File formats","title":"File formats","text":"load_hinfile\nwrite_hinfile","category":"page"},{"location":"public/fileformats/#BiochemicalAlgorithms.load_hinfile","page":"File formats","title":"BiochemicalAlgorithms.load_hinfile","text":"load_hinfile(\n    fname::AbstractString,\n    ::Type{T} = Float32\n) -> System{T}\n\nRead a HyperChem HIN file.\n\n\n\n\n\n","category":"function"},{"location":"public/fileformats/#BiochemicalAlgorithms.write_hinfile","page":"File formats","title":"BiochemicalAlgorithms.write_hinfile","text":"write_hinfile(\n    fname::AbstractString,\n    ac::AtomContainer\n)\n\nSave an atom container as HyperChem HIN file.\n\nnote: Note\nHIN files define molecules as connected components in the molecular graph. If the AtomContainer is missing bonds, e.g., after reading a PDB file and not postprocessing it correctly, the HIN file may contain a surprisingly large number of molecules.\n\n\n\n\n\n","category":"function"},{"location":"public/fileformats/#PDB-files","page":"File formats","title":"PDB files","text":"","category":"section"},{"location":"public/fileformats/","page":"File formats","title":"File formats","text":"load_pdb\nwrite_pdb","category":"page"},{"location":"public/fileformats/#BiochemicalAlgorithms.load_pdb","page":"File formats","title":"BiochemicalAlgorithms.load_pdb","text":"load_pdb(fname::AbstractString, ::Type{T} = Float32) -> System{T}\n\nRead a PDB file.\n\nnote: Note\nModels are stored as frames, using the model number as frame_id.\n\n\n\n\n\n","category":"function"},{"location":"public/fileformats/#BiochemicalAlgorithms.write_pdb","page":"File formats","title":"BiochemicalAlgorithms.write_pdb","text":"write_pdb(fname::AbstractString, ac::AbstractAtomContainer)\n\nSave an atom container as PDB file.\n\n\n\n\n\n","category":"function"},{"location":"public/fileformats/#PDBx/mmCIF-files","page":"File formats","title":"PDBx/mmCIF files","text":"","category":"section"},{"location":"public/fileformats/","page":"File formats","title":"File formats","text":"load_mmcif\nwrite_mmcif","category":"page"},{"location":"public/fileformats/#BiochemicalAlgorithms.load_mmcif","page":"File formats","title":"BiochemicalAlgorithms.load_mmcif","text":"load_mmcif(fname::AbstractString, ::Type{T} = Float32) -> System{T}\n\nRead a PDBx/mmCIF file.\n\nnote: Note\nModels are stored as frames, using the model number as frame_id.\n\n\n\n\n\n","category":"function"},{"location":"public/fileformats/#BiochemicalAlgorithms.write_mmcif","page":"File formats","title":"BiochemicalAlgorithms.write_mmcif","text":"write_mmcif(fname::AbstractString, ac::AbstractAtomContainer)\n\nSave an atom container as PDBx/mmCIF file.\n\n\n\n\n\n","category":"function"},{"location":"public/fileformats/#PubChem-JSON","page":"File formats","title":"PubChem JSON","text":"","category":"section"},{"location":"public/fileformats/","page":"File formats","title":"File formats","text":"load_pubchem_json","category":"page"},{"location":"public/fileformats/#BiochemicalAlgorithms.load_pubchem_json","page":"File formats","title":"BiochemicalAlgorithms.load_pubchem_json","text":"load_pubchem_json(fname::AbstractString, ::Type{T} = Float32) -> System{T}\n\nRead a PubChem JSON file.\n\nnote: Note\nConformers are stored as frames.\n\n\n\n\n\n","category":"function"},{"location":"public/fileformats/#Structures-data-files-(SDF,-SDFile)","page":"File formats","title":"Structures data files (SDF, SDFile)","text":"","category":"section"},{"location":"public/fileformats/","page":"File formats","title":"File formats","text":"load_sdfile\nwrite_sdfile","category":"page"},{"location":"public/fileformats/#BiochemicalAlgorithms.load_sdfile","page":"File formats","title":"BiochemicalAlgorithms.load_sdfile","text":"load_sdfile(fname::AbstractString, ::Type{T} = Float32) -> System{T}\n\nRead an SDFile.\n\n\n\n\n\n","category":"function"},{"location":"public/fileformats/#BiochemicalAlgorithms.write_sdfile","page":"File formats","title":"BiochemicalAlgorithms.write_sdfile","text":"write_sdfile(fname::AbstractString, ac::AbstractAtomContainer)\n\nSave a 2D projection of an atom container as SDFile.\n\n\n\n\n\n","category":"function"},{"location":"tutorials/read_and_write/#All-on-Input-and-Output","page":"How to read and write","title":"All on Input and Output","text":"","category":"section"},{"location":"tutorials/read_and_write/","page":"How to read and write","title":"How to read and write","text":"BiochemicalAlgorithms.jl supports the reading and writing of several common structural data formats.","category":"page"},{"location":"tutorials/read_and_write/#Protein-Data-Bank-Format-(PDB)","page":"How to read and write","title":"Protein Data Bank Format (PDB)","text":"","category":"section"},{"location":"tutorials/read_and_write/","page":"How to read and write","title":"How to read and write","text":"The most common format ist the PDB. Have a look at Learning about PDB data if you want to refresh your knowledge about this format. For a deeper understanding you can also read PDB format specifications.","category":"page"},{"location":"tutorials/read_and_write/","page":"How to read and write","title":"How to read and write","text":"Read a PDB file from the BiochemicalAlgorithms.jl repository:","category":"page"},{"location":"tutorials/read_and_write/","page":"How to read and write","title":"How to read and write","text":"sys = load_pdb(ball_data_path(\"../test/data/AlaAla.pdb\"))","category":"page"},{"location":"tutorials/read_and_write/","page":"How to read and write","title":"How to read and write","text":"System{Float32} with 23 atoms (AlaAla.pdb)","category":"page"},{"location":"tutorials/read_and_write/","page":"How to read and write","title":"How to read and write","text":"Write the same system back into a new PDB file:","category":"page"},{"location":"tutorials/read_and_write/","page":"How to read and write","title":"How to read and write","text":"write_pdb(\"Ala_out.pdb\", sys)","category":"page"},{"location":"tutorials/read_and_write/#PubChem","page":"How to read and write","title":"PubChem","text":"","category":"section"},{"location":"tutorials/read_and_write/","page":"How to read and write","title":"How to read and write","text":"In addition to PDB, the pubchem data base plays an important role as a source of structural data. Pubchem allows to retrieve data in JSON which is read by BiochemicalAlgorithms.jl as shown below:","category":"page"},{"location":"tutorials/read_and_write/","page":"How to read and write","title":"How to read and write","text":"sys = load_pubchem_json(ball_data_path(\"../test/data/aspirin_pug.json\"))","category":"page"},{"location":"tutorials/read_and_write/","page":"How to read and write","title":"How to read and write","text":"System{Float32} with 21 atoms","category":"page"},{"location":"tutorials/read_and_write/#SD-file","page":"How to read and write","title":"SD file","text":"","category":"section"},{"location":"tutorials/read_and_write/","page":"How to read and write","title":"How to read and write","text":"sys = load_sdfile(ball_data_path(\"../test/data/rings_test.sdf\"))","category":"page"},{"location":"tutorials/read_and_write/","page":"How to read and write","title":"How to read and write","text":"System{Float32} with 148 atoms (rings_test.sdf)","category":"page"},{"location":"tutorials/read_and_write/","page":"How to read and write","title":"How to read and write","text":"Write the system into a new SD file:","category":"page"},{"location":"tutorials/read_and_write/","page":"How to read and write","title":"How to read and write","text":"write_sdfile(\"rings_test_out.sdf\", sys)","category":"page"},{"location":"tutorials/read_and_write/","page":"How to read and write","title":"How to read and write","text":"┌ Warning: write_sdfile: writer only supports 2D data; projecting atoms onto xy-plane...\n└ @ BiochemicalAlgorithms ~/git/ball.jl/src/fileformats/sdfile.jl:23\n[ Info: 9 records exported.","category":"page"},{"location":"CONTRIBUTING/#Contributing-Guidelines","page":"Contributing Guidelines","title":"Contributing Guidelines","text":"","category":"section"},{"location":"CONTRIBUTING/#Certificate-of-Origin","page":"Contributing Guidelines","title":"Certificate of Origin","text":"","category":"section"},{"location":"CONTRIBUTING/","page":"Contributing Guidelines","title":"Contributing Guidelines","text":"Source: Developer Certificate of Origin","category":"page"},{"location":"CONTRIBUTING/","page":"Contributing Guidelines","title":"Contributing Guidelines","text":"Developer Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.","category":"page"},{"location":"CONTRIBUTING/","page":"Contributing Guidelines","title":"Contributing Guidelines","text":"All contributions to this project need to be in agreement with the Developer Certificate of Origin. In particular, all commits contributed to this repository need to include the following line in their respective commit message to certify agreement, with name and e-mail address modified accordingly:","category":"page"},{"location":"CONTRIBUTING/","page":"Contributing Guidelines","title":"Contributing Guidelines","text":"Signed-off-by: Name <E-mail>","category":"page"},{"location":"CONTRIBUTING/","page":"Contributing Guidelines","title":"Contributing Guidelines","text":"You can use the --signoff (or -s) option of the git commit command to facilitate this process.","category":"page"},{"location":"private/mappings/#Mappings","page":"Mappings","title":"Mappings","text":"","category":"section"},{"location":"private/mappings/","page":"Mappings","title":"Mappings","text":"CurrentModule = BiochemicalAlgorithms","category":"page"},{"location":"private/mappings/","page":"Mappings","title":"Mappings","text":"Pages = [\"mappings.md\"]","category":"page"},{"location":"private/mappings/","page":"Mappings","title":"Mappings","text":"_compute_rotation\nmatch_points","category":"page"},{"location":"private/mappings/#BiochemicalAlgorithms._compute_rotation","page":"Mappings","title":"BiochemicalAlgorithms._compute_rotation","text":"_compute_rotation(\n    R::StaticArraysCore.SArray{Tuple{3, 3}, T<:Real, 2},\n    _::Type{RMSDMinimizerKabsch}\n) -> Any\n\n\nComputes the rotation matrix by solving the eigenvalue problem given as the correlation matrix C. Uses all resulting eigenvalues and eigenvectors. Warns if the correlation matrix is not positive definit (contains negative eigenvalues or eigenvalues equal to 0) and uses the alternative approch RMSDMinimizerCoutsias instead. Returns a RotMatrix3.\n\n\n\n\n\n_compute_rotation(\n    R::StaticArraysCore.SArray{Tuple{3, 3}, T<:Real, 2},\n    _::Type{RMSDMinimizerCoutsias}\n) -> Rotations.RotMatrix3{T} where T<:Real\n\n\nComputes the rotation matrix by solving the eigenvalue problem given as the residual matrix F. Uses only the largest of the resulting eigenvalues to generate the quaternion describing the optimal rotation that maps the atoms onto each other. Returns a RotMatrix3.\n\n\n\n\n\n","category":"function"},{"location":"private/mappings/#BiochemicalAlgorithms.match_points","page":"Mappings","title":"BiochemicalAlgorithms.match_points","text":"match_points(\n    w1::StaticArraysCore.SArray{Tuple{3}, T<:Real, 1, 3},\n    w2::StaticArraysCore.SArray{Tuple{3}, T<:Real, 1, 3},\n    w3::StaticArraysCore.SArray{Tuple{3}, T<:Real, 1, 3},\n    v1::StaticArraysCore.SArray{Tuple{3}, T<:Real, 1, 3},\n    v2::StaticArraysCore.SArray{Tuple{3}, T<:Real, 1, 3},\n    v3::StaticArraysCore.SArray{Tuple{3}, T<:Real, 1, 3}\n) -> Tuple{Any, Any}\n\n\nThe transformation maps\n\nthe point w1 onto the point v1 and\nthe point w2 onto the ray that starts in v1 and goes through v2\nthe point w3 into the plane generated by v1, v2 and v3\n\n\n\n\n\n","category":"function"},{"location":"private/system/#Biomolecular-systems","page":"Biomolecular systems","title":"Biomolecular systems","text":"","category":"section"},{"location":"private/system/","page":"Biomolecular systems","title":"Biomolecular systems","text":"CurrentModule = BiochemicalAlgorithms","category":"page"},{"location":"private/system/","page":"Biomolecular systems","title":"Biomolecular systems","text":"Pages = [\"system.md\"]","category":"page"},{"location":"private/system/","page":"Biomolecular systems","title":"Biomolecular systems","text":"_default_system\n_next_idx!","category":"page"},{"location":"private/system/#BiochemicalAlgorithms._default_system","page":"Biomolecular systems","title":"BiochemicalAlgorithms._default_system","text":"const _default_system\n\nGlobal default system.\n\n\n\n\n\n","category":"constant"},{"location":"private/system/#BiochemicalAlgorithms._next_idx!","page":"Biomolecular systems","title":"BiochemicalAlgorithms._next_idx!","text":"_next_idx!(sys::System{T}) -> Int64\n\n\nReturns the next available idx for the given system.\n\n\n\n\n\n","category":"function"},{"location":"tutorials/iterate/#All-on-iteration","page":"How to iterate","title":"All on iteration","text":"","category":"section"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"When working with molecular entities, we want to run over all atoms of a system, over all chains, etc. In this tutorial we will learn how this can be done.","category":"page"},{"location":"tutorials/iterate/#Molecular-systems","page":"How to iterate","title":"Molecular systems","text":"","category":"section"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"In BiochemicalAlgorithms.jl atoms and bonds are existing inside a System. Typically, molecular data is stored in molecular data formats such as PDB. The latter can be directly read into a system.","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"sys = load_pdb(ball_data_path(\"../test/data/AlaAla.pdb\"))","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"System{Float32} with 23 atoms (AlaAla.pdb)","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"You can, e.g., print all atoms of the given system as a table:","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"atoms(sys)","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"# idx number element name atom_type r v F formal_charge charge radius\n1 5 1 N N  Float32[-1.45, 0.0, 0.0] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n2 6 2 C CA  Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n3 7 3 C C  Float32[0.495, 0.0, 1.437] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n4 8 4 O O  Float32[1.235, -0.911, 1.838] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n5 9 5 H 1H  Float32[-1.788, 0.918, 0.25] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n6 10 6 H 1HB  Float32[1.642, 1.124, -0.864] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n7 11 7 H 2H  Float32[-1.801, -0.26, -0.911] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n8 12 8 H 2HB  Float32[0.154, 1.136, -1.827] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n9 13 9 H 3H  Float32[-1.749, -0.665, 0.704] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n10 14 10 H 3HB  Float32[0.258, 2.118, -0.351] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n11 15 11 C CB  Float32[0.554, 1.175, -0.813] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n12 16 12 H HA  Float32[0.341, -0.928, -0.46] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n13 17 13 N N  Float32[0.133, 0.98, 2.268] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n14 18 14 C CA  Float32[0.605, 0.98, 3.639] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n15 19 15 C C  Float32[0.414, -0.408, 4.228] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n16 20 16 H H  Float32[-0.476, 1.73, 1.938] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n17 21 17 H 1HB  Float32[0.325, 2.106, 5.472] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n18 22 18 H 2HB  Float32[0.065, 3.039, 3.988] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n19 23 19 H 3HB  Float32[-1.16, 1.868, 4.519] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n20 24 20 C CB  Float32[-0.089, 2.07, 4.463] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n21 25 21 H HA  Float32[1.676, 1.185, 3.63] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n22 26 22 O O  Float32[0.531, -1.358, 3.421] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n23 27 23 O OXT  Float32[0.462, -0.512, 5.473] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"AtomTable{Float32} with 23 rows:","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"Single columns can be directly accessed by their name:","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"atoms(sys).name","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"23-element SystemComponentTableCol{String}:\n \"N\"\n \"CA\"\n \"C\"\n \"O\"\n \"1H\"\n \"1HB\"\n \"2H\"\n \"2HB\"\n \"3H\"\n \"3HB\"\n ⋮\n \"C\"\n \"H\"\n \"1HB\"\n \"2HB\"\n \"3HB\"\n \"CB\"\n \"HA\"\n \"O\"\n \"OXT\"","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"You can also directly query the number of atoms via natoms:","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"natoms(sys)","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"23","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"Similar functions exist for other system components, including bonds, molecules, chains, and fragments.","category":"page"},{"location":"tutorials/iterate/#How-can-I-iterate-over-all-atoms-of-a-system?","page":"How to iterate","title":"How can I iterate over all atoms of a system?","text":"","category":"section"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"We can just as easily iterate over all atoms:","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"for atom in atoms(sys)\n    # do something with this atom\nend","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"Or, for individual columns:","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"for atom_name in atoms(sys).name\n    # do something with this atom name\nend","category":"page"},{"location":"tutorials/iterate/#How-can-I-iterate-over-specific-atoms?","page":"How to iterate","title":"How can I iterate over specific atoms?","text":"","category":"section"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"In many scenarios, we only want to iterate over a subset of atoms fulfilling a specific criteria. For example, here we only want to get the positions of the C_alpha atoms:","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"ca_atoms = filter(atom -> atom.name == \"CA\", atoms(sys))","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"# idx number element name atom_type r v F formal_charge charge radius\n1 6 2 C CA  Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n2 18 14 C CA  Float32[0.605, 0.98, 3.639] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"AtomTable{Float32} with 2 rows:","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"And here we only want the heavy atoms:","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"heavy_atoms = filter(atom -> atom.element != Elements.H, atoms(sys))","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"# idx number element name atom_type r v F formal_charge charge radius\n1 5 1 N N  Float32[-1.45, 0.0, 0.0] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n2 6 2 C CA  Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n3 7 3 C C  Float32[0.495, 0.0, 1.437] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n4 8 4 O O  Float32[1.235, -0.911, 1.838] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n5 15 11 C CB  Float32[0.554, 1.175, -0.813] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n6 17 13 N N  Float32[0.133, 0.98, 2.268] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n7 18 14 C CA  Float32[0.605, 0.98, 3.639] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n8 19 15 C C  Float32[0.414, -0.408, 4.228] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n9 24 20 C CB  Float32[-0.089, 2.07, 4.463] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n10 26 22 O O  Float32[0.531, -1.358, 3.421] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0\n11 27 23 O OXT  Float32[0.462, -0.512, 5.473] Float32[0.0, 0.0, 0.0] Float32[0.0, 0.0, 0.0] 0 0.0 0.0","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"AtomTable{Float32} with 11 rows:","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"Instead of a system, we can use any other system component as an argument to the atoms function to only list the atoms of the same component. For example, the following system contains two chains:","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"sys = load_pdb(ball_data_path(\"../test/data/2ptc.pdb\"))\nchains(sys)","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"# idx name\n1 2 E\n2 349 I","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"ChainTable{Float32} with 2 rows:","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"In order to get all atoms of the first chain, we can use:","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"chainE = first(chains(sys))\nfor atom in atoms(chainE)\n    # do something with this atom of the first chain\nend","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"We can even combine this approach with filtering to get, e.g., only the C_alpha atoms of the first chain:","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"for atom in filter(atom -> atom.name == \"CA\", atoms(chainE))\n    # do something with this CA atom of the first chain\nend","category":"page"},{"location":"tutorials/iterate/#How-can-I-iterate-over-all-bonds-of-a-system?","page":"How to iterate","title":"How can I iterate over all bonds of a system?","text":"","category":"section"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"Bonds are not explicitely stored in the PDB format but are rather inferred after reading the data into a system using the fragment database FragmentDB:","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"sys = load_pdb(ball_data_path(\"../test/data/AlaAla.pdb\"))\n\n# bonds are not contained in the pdb file\nnbonds(sys)","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"0","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"# use the fragment database for normalizing naming schemas between molecular file formats, reconstruction of missing parts of the structure and building the bonds\nfdb = FragmentDB()\n\nnormalize_names!(sys, fdb)\nreconstruct_fragments!(sys, fdb)\nbuild_bonds!(sys, fdb)\n\nnbonds(sys)","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"[ Info: reconstruct_fragments!(): added 0 atoms.\n[ Info: build_bonds!(): built 22 bonds\n\n22","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"Similar to the atom iteration, we can iterate over all bonds of a sysem:","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"for bond in bonds(sys)\n    # do something with this bond\nend","category":"page"},{"location":"tutorials/iterate/#How-can-I-iterate-over-all-fragments/residues/nucleotides-of-a-system?","page":"How to iterate","title":"How can I iterate over all fragments/residues/nucleotides of a system?","text":"","category":"section"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"Chains usually contain fragments, e. g., residues or nucleotides and can either be queried collectively…","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"sys = load_pdb(ball_data_path(\"../test/data/2ptc.pdb\"))\n\nnfragments(sys)","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"439","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"…or by a given type:","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"println(\"Number of residues: \", nresidues(sys))\nprintln(\"Number of nucleotides: \", nnucleotides(sys))","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"Number of residues: 281\nNumber of nucleotides: 0","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"Just like in the examples above, the functions can also be used with other atom containers:","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"nresidues.(chains(sys))","category":"page"},{"location":"tutorials/iterate/","page":"How to iterate","title":"How to iterate","text":"2-element Vector{Int64}:\n 223\n  58","category":"page"},{"location":"tutorials/handle_molecules/#All-on-Handling-molecules","page":"How to handle molecules","title":"All on Handling molecules","text":"","category":"section"},{"location":"tutorials/handle_molecules/#How-can-I-create-a-simple-molecule?","page":"How to handle molecules","title":"How can I create a simple molecule?","text":"","category":"section"},{"location":"tutorials/handle_molecules/","page":"How to handle molecules","title":"How to handle molecules","text":"# create a system first\nsys = System{Float32}() # this system will be of single precision, i.e., atom positions, velocities...\n\n# as well as a molecule\nh2o = Molecule(sys)\n\n# create system atoms\no1 = Atom(h2o, 1, Elements.O)\nh1 = Atom(h2o, 2, Elements.H)\nh2 = Atom(h2o, 3, Elements.H)\n\n# set positions of the atoms\n# o1.r = [0, 0, 0]  <-- this is the default value!\nh1.r = [1, 0, 0]\nh2.r = [cos(deg2rad(105)), sin(deg2rad(105)), 0]\n\n# add bonds\nBond(h2o, o1.idx, h1.idx, BondOrder.Single)\nBond(h2o, o1.idx, h2.idx, BondOrder.Single)\n\nprintln(\"Number of atoms: \", natoms(h2o))\nprintln(\"Number of bonds: \", nbonds(h2o))","category":"page"},{"location":"tutorials/handle_molecules/","page":"How to handle molecules","title":"How to handle molecules","text":"Number of atoms: 3\nNumber of bonds: 2","category":"page"},{"location":"tutorials/handle_molecules/#How-can-I-determine-the-element-of-an-atom-(C,-N,-…)?","page":"How to handle molecules","title":"How can I determine the element of an atom (C, N, …)?","text":"","category":"section"},{"location":"tutorials/handle_molecules/","page":"How to handle molecules","title":"How to handle molecules","text":"sys = load_pdb(ball_data_path(\"../test/data/AlaAla.pdb\"))\nfor atom in atoms(sys)\n    println(\"Atom no.: $(atom.number), element: $(atom.element)\")\nend","category":"page"},{"location":"tutorials/handle_molecules/","page":"How to handle molecules","title":"How to handle molecules","text":"Atom no.: 1, element: N\nAtom no.: 2, element: C\nAtom no.: 3, element: C\nAtom no.: 4, element: O\nAtom no.: 5, element: H\nAtom no.: 6, element: H\nAtom no.: 7, element: H\nAtom no.: 8, element: H\nAtom no.: 9, element: H\nAtom no.: 10, element: H\nAtom no.: 11, element: C\nAtom no.: 12, element: H\nAtom no.: 13, element: N\nAtom no.: 14, element: C\nAtom no.: 15, element: C\nAtom no.: 16, element: H\nAtom no.: 17, element: H\nAtom no.: 18, element: H\nAtom no.: 19, element: H\nAtom no.: 20, element: C\nAtom no.: 21, element: H\nAtom no.: 22, element: O\nAtom no.: 23, element: O","category":"page"},{"location":"tutorials/handle_molecules/","page":"How to handle molecules","title":"How to handle molecules","text":"You can also filter for specific elements:","category":"page"},{"location":"tutorials/handle_molecules/","page":"How to handle molecules","title":"How to handle molecules","text":"c_atoms = filter(atom -> atom.element == Elements.C, atoms(sys))\nfor atom in c_atoms\n    println(\"Atom no.: $(atom.number), element: $(atom.element)\")\nend","category":"page"},{"location":"tutorials/handle_molecules/","page":"How to handle molecules","title":"How to handle molecules","text":"Atom no.: 2, element: C\nAtom no.: 3, element: C\nAtom no.: 11, element: C\nAtom no.: 14, element: C\nAtom no.: 15, element: C\nAtom no.: 20, element: C","category":"page"},{"location":"tutorials/handle_molecules/#How-can-I-identify-backbone-atoms?","page":"How to handle molecules","title":"How can I identify backbone atoms?","text":"","category":"section"},{"location":"tutorials/handle_molecules/","page":"How to handle molecules","title":"How to handle molecules","text":"sys = load_pdb(ball_data_path(\"../test/data/AlaAla.pdb\"))\nfor atom in atoms(sys)\n    print(atom.element)\n    if atom.name in [\"C\", \"O\", \"N\", \"HA\"]\n        print(\" <-- This is a backbone atom!\")\n    end\n    println()\nend","category":"page"},{"location":"tutorials/handle_molecules/","page":"How to handle molecules","title":"How to handle molecules","text":"N <-- This is a backbone atom!\nC\nC <-- This is a backbone atom!\nO <-- This is a backbone atom!\nH\nH\nH\nH\nH\nH\nC\nH <-- This is a backbone atom!\nN <-- This is a backbone atom!\nC\nC <-- This is a backbone atom!\nH\nH\nH\nH\nC\nH <-- This is a backbone atom!\nO <-- This is a backbone atom!\nO","category":"page"},{"location":"tutorials/handle_molecules/#How-can-I-get-the-one-letter-code-out-of-a-pdb-file?","page":"How to handle molecules","title":"How can I get the one-letter code out of a pdb file?","text":"","category":"section"},{"location":"tutorials/handle_molecules/","page":"How to handle molecules","title":"How to handle molecules","text":"sys = load_pdb(ball_data_path(\"../test/data/2ptc.pdb\"))\nfor chain in chains(sys)\n    # get all residues from the current chain\n    res = residues(chain).name\n    println(\"> Chain $(chain.name)\")\n    println(join(one_letter_code.(res), \"\"))\nend","category":"page"},{"location":"tutorials/handle_molecules/","page":"How to handle molecules","title":"How to handle molecules","text":"> Chain E\nIVGGYTCGANTVPYQVSLNSGYHFCGGSLINSQWVVSAAHCYKSGIQVRLGEDNINVVEGNEQFISASKSIVHPSYNSNTLNNDIMLIKLKSAASLNSRVASISLPTSCASAGTQCLISGWGNTKSSGTSYPDVLKCLKAPILSDSSCKSAYPGQITSNMFCAYGLEGKGDSCQGDSGGPVVCSGKLQGIVSWGSGCQAKNKPGVYTKVCNYVSWIKQTIASN\n> Chain I\nRPDFCLEPPYTGPCKARIIRYFYNAKAGLCQTFVYGGCRAKRNNFKSAEDCMRTCGGA","category":"page"},{"location":"tutorials/handle_molecules/#How-can-I-pick-one-single-chain-out-of-a-system-containing-several-chains?","page":"How to handle molecules","title":"How can I pick one single chain out of a system containing several chains?","text":"","category":"section"},{"location":"tutorials/handle_molecules/","page":"How to handle molecules","title":"How to handle molecules","text":"This is often needed when a receptor and a ligand are co-complexed and you want to treat them separately.","category":"page"},{"location":"tutorials/handle_molecules/","page":"How to handle molecules","title":"How to handle molecules","text":"sys = load_pdb(ball_data_path(\"../test/data/2ptc.pdb\"))\n\nall_chains = chains(sys)","category":"page"},{"location":"tutorials/handle_molecules/","page":"How to handle molecules","title":"How to handle molecules","text":"# idx name\n1 2 E\n2 349 I","category":"page"},{"location":"tutorials/handle_molecules/","page":"How to handle molecules","title":"How to handle molecules","text":"ChainTable{Float32} with 2 rows:","category":"page"},{"location":"tutorials/handle_molecules/","page":"How to handle molecules","title":"How to handle molecules","text":"This snippet will create separate PDB files for the two chains of the system:","category":"page"},{"location":"tutorials/handle_molecules/","page":"How to handle molecules","title":"How to handle molecules","text":"write_pdb(\"2ptc_chainE.pdb\", all_chains[1])\nwrite_pdb(\"2ptc_chainI.pdb\", all_chains[2])","category":"page"},{"location":"tutorials/handle_molecules/#How-can-I-map-two-configurations-of-the-same-protein-onto-each-other?","page":"How to handle molecules","title":"How can I map two configurations of the same protein onto each other?","text":"","category":"section"},{"location":"tutorials/handle_molecules/","page":"How to handle molecules","title":"How to handle molecules","text":"# read in the first protein\nsys = load_pdb(ball_data_path(\"../test/data/2ptc.pdb\"))\nmol = first(molecules(sys))\n\n# we will generate a second version of the protein by moving it around\nsys2 = deepcopy(sys)\nmol2 = first(molecules(sys2))\ntranslate!(mol2, Vector3{Float32}(2.0,1.0,2.0))\n\n# let's see how far the structures are apart\nprintln(\"RMSD before mapping:\\t\", compute_rmsd(mol2, mol))\n\n# now we have two proteins or system we can map together\nmap_rigid!(mol2, mol)\n\n# let's see how far the structures are apart afterwards\nprintln(\"RMSD after mapping:\\t\", compute_rmsd(mol2, mol))","category":"page"},{"location":"tutorials/handle_molecules/","page":"How to handle molecules","title":"How to handle molecules","text":"RMSD before mapping:    3.0\nRMSD after mapping: 3.881571e-6","category":"page"},{"location":"tutorials/handle_molecules/#How-can-I-remove-water-molecules-from-a-system?","page":"How to handle molecules","title":"How can I remove water molecules from a system?","text":"","category":"section"},{"location":"tutorials/handle_molecules/","page":"How to handle molecules","title":"How to handle molecules","text":"sys = load_pdb(ball_data_path(\"../test/data/1tgh.pdb\"))\n\nprintln(\"Number of atoms before removing water: \", natoms(sys))\n\n# find all water fragments\nft = filter(frag -> frag.name == \"HOH\", fragments(sys))\n\n# delete the found fragments, including all atoms and bonds\ndelete!(ft)\n\nprintln(\"Number of atoms after removing water: \", natoms(sys))","category":"page"},{"location":"tutorials/handle_molecules/","page":"How to handle molecules","title":"How to handle molecules","text":"Number of atoms before removing water: 2355\nNumber of atoms after removing water: 2301","category":"page"},{"location":"tutorials/getting_started/#Welcome-to-BiochemicalAlgorithms.jl","page":"How to get started","title":"Welcome to BiochemicalAlgorithms.jl","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"How to get started","title":"How to get started","text":"In this tutorial, you will learn about the basic concepts of the BiochemicalAlgorithms.jl library, a complete rewrite of the C++ framework BALL in Julia.","category":"page"},{"location":"tutorials/getting_started/","page":"How to get started","title":"How to get started","text":"To use BiochemicalAlgorithms.jl in your code, add it to your project","category":"page"},{"location":"tutorials/getting_started/","page":"How to get started","title":"How to get started","text":"using Pkg\nPkg.add(\"BiochemicalAlgorithms\")","category":"page"},{"location":"tutorials/getting_started/","page":"How to get started","title":"How to get started","text":"and use it in your code:","category":"page"},{"location":"tutorials/getting_started/","page":"How to get started","title":"How to get started","text":"using BiochemicalAlgorithms","category":"page"},{"location":"tutorials/getting_started/#Representing-molecular-systems","page":"How to get started","title":"Representing molecular systems","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"How to get started","title":"How to get started","text":"In BiochemicalAlgorithms.jl, all molecules are stored in so-called Systems. While a System can be created from scratch and filled programmatically, it is commonly created by reading a molecular file, such as a PDB-file:","category":"page"},{"location":"tutorials/getting_started/","page":"How to get started","title":"How to get started","text":"s = load_pdb(ball_data_path(\"../test/data/2ptc.pdb\"))","category":"page"},{"location":"tutorials/getting_started/","page":"How to get started","title":"How to get started","text":"System{Float32} with 2241 atoms (2ptc.pdb)","category":"page"},{"location":"tutorials/getting_started/","page":"How to get started","title":"How to get started","text":"You can then run methods on this system, e.g.","category":"page"},{"location":"tutorials/getting_started/","page":"How to get started","title":"How to get started","text":"println(\"The system $(s.name) contains $(natoms(s)) atoms.\")","category":"page"},{"location":"tutorials/getting_started/","page":"How to get started","title":"How to get started","text":"The system 2ptc.pdb contains 2241 atoms.","category":"page"},{"location":"tutorials/getting_started/#Common-preparation-steps","page":"How to get started","title":"Common preparation steps","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"How to get started","title":"How to get started","text":"The data stored in many molecular file formats is incomplete, or needs to be normalized in certain ways. PDB-files, for instance, often omit hydrogen atoms, and don’t usually store bonds that can be inferred otherwise. BiochemicalAlgorithms.jl offers a number of methods that perform preparation steps that are common to most molecular modelling applications, such as normalizing atom- and fragment names, computing bonds, adding missing atoms from a library of templates (such as amino acids), or saturating a molecule with hydrogen atoms. The template information used by these methods is stored in the so-called FragmentDB. A common series of operations to prepare a system for further processing is as follows:","category":"page"},{"location":"tutorials/getting_started/","page":"How to get started","title":"How to get started","text":"fdb = FragmentDB()\nnormalize_names!(s, fdb)\nreconstruct_fragments!(s, fdb)\nbuild_bonds!(s, fdb)","category":"page"},{"location":"tutorials/getting_started/","page":"How to get started","title":"How to get started","text":"┌ Warning: reconstruct_fragments!(): could not find reference fragment for  CA:462\n└ @ BiochemicalAlgorithms ~/git/ball.jl/src/preprocessing/reconstruct_fragments.jl:177\n[ Info: reconstruct_fragments!(): added 2364 atoms.\n┌ Warning: build_bonds!(): could not find reference fragment for  CA.\n└ @ BiochemicalAlgorithms ~/git/ball.jl/src/preprocessing/build_bonds.jl:14\n[ Info: build_bonds!(): built 4498 bonds","category":"page"},{"location":"tutorials/force_field_ops/#Working-with-force-fields","page":"How to apply force fields","title":"Working with force fields","text":"","category":"section"},{"location":"tutorials/force_field_ops/#Preparation","page":"How to apply force fields","title":"Preparation","text":"","category":"section"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"Force fields in BiochemicalAlgorithms.jl are always set up for a given molecular system. Hence, we first need to prepare a System object as usual, e.g., by loading a structure from a PDB file and applying our fragment database preprocessors:","category":"page"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"sys = load_pdb(ball_data_path(\"../test/data/AlaAla.pdb\"))\n\nfdb = FragmentDB()\nnormalize_names!(sys, fdb)\nreconstruct_fragments!(sys, fdb)\nbuild_bonds!(sys, fdb)\n\nsys","category":"page"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"[ Info: reconstruct_fragments!(): added 0 atoms.\n[ Info: build_bonds!(): built 22 bonds\n\nSystem{Float32} with 23 atoms (AlaAla.pdb)","category":"page"},{"location":"tutorials/force_field_ops/#Setting-up-a-force-field","page":"How to apply force fields","title":"Setting up a force field","text":"","category":"section"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"Setting up a force field boils down to a simple constructor call:","category":"page"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"ff = AmberFF(sys)","category":"page"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"┌ Warning: 2 warnings occurred during setup that were suppressed:\n│ Components:\n│ Torsion: 2 warnings\n│ Use print_warnings(ff) to display them.\n└ @ BiochemicalAlgorithms ~/git/ball.jl/src/forcefields/common/forcefield.jl:164\n\nAmberFF for 23 atoms with 22 bonds.","category":"page"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"This will initialize the force field object using the atoms (and their positions in particular) as seen at time of construction. Later alterations of the same system must be made known to the force field by calling the update! function:","category":"page"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"update!(ff)","category":"page"},{"location":"tutorials/force_field_ops/#Force-computation","page":"How to apply force fields","title":"Force computation","text":"","category":"section"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"Force vectors for all atoms can be computed using the compute_forces! function:","category":"page"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"compute_forces!(ff)","category":"page"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"The force vectors computed here are directly stored in the underlying system:","category":"page"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"atoms(sys).F   # or, equivalently, atoms(ff.system).F","category":"page"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"23-element SystemComponentTableCol{StaticArraysCore.SVector{3, Float32}}:\n [-8.905341f-10, -3.7217035f-10, 4.1395054f-10]\n [7.802113f-10, 5.1211924f-11, -4.5226885f-11]\n [2.1271647f-9, 7.6049345f-10, -1.7229925f-9]\n [6.35672f-8, 4.1203478f-8, -1.4751434f-7]\n [-6.499216f-11, -9.310282f-11, 5.374651f-11]\n [4.213668f-11, -7.5111216f-11, 1.0826247f-10]\n [8.747198f-12, -6.8457344f-11, 8.2736526f-11]\n [6.989254f-11, 1.4578986f-11, -3.0845635f-11]\n [-1.9595292f-10, -1.1358164f-10, -1.1052925f-10]\n [7.2654154f-11, 4.829702f-11, -4.4509316f-11]\n ⋮\n [2.4661245f-10, -1.1778086f-9, 2.604445f-9]\n [8.2778495f-10, -5.4249055f-10, 8.765799f-10]\n [3.3519593f-11, -1.4663633f-10, 3.168089f-11]\n [4.1687834f-11, 5.7383577f-12, 1.0522515f-10]\n [7.105667f-11, -7.6943465f-11, 1.3604341f-10]\n [-4.5483453f-10, 7.660909f-10, -6.81682f-10]\n [9.818538f-12, -2.6953412f-10, 2.1820955f-10]\n [-6.4707145f-8, -4.2964025f-8, 1.470911f-7]\n [-2.1067495f-10, 1.2029502f-10, -2.3378385f-10]","category":"page"},{"location":"tutorials/force_field_ops/#Potential-energy-computation","page":"How to apply force fields","title":"Potential energy computation","text":"","category":"section"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"Similarly, potential energies can be computed via compute_energy!:","category":"page"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"compute_energy!(ff)","category":"page"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"1425.6062f0","category":"page"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"This will return the total energy of the system (in kJ/mol). Additionally, the force field object keeps track of individual contributions of force field components, which can be queried like this:","category":"page"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"ff.energy","category":"page"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"Dict{String, Float32} with 7 entries:\n  \"Angle Bends\"      => 5.40767\n  \"Hydrogen Bonds\"   => 0.0\n  \"Bond Stretches\"   => 1.36306\n  \"Van der Waals\"    => 1493.18\n  \"Improper Torsion\" => 3.99017f-6\n  \"Electrostatic\"    => -85.1466\n  \"Proper Torsion\"   => 10.7981","category":"page"},{"location":"tutorials/force_field_ops/#Structure-optimization","page":"How to apply force fields","title":"Structure optimization","text":"","category":"section"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"The force field object can also be used to find a structure minimizing the total energy of the system:","category":"page"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"optimize_structure!(ff)\ncompute_energy!(ff)","category":"page"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"-374.31445f0","category":"page"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"The opmitization function also updates the atom positions correspondingly such that the structure can be visualized in its optimized state, e.g., through BiochemicalVisualization.jl.","category":"page"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"We provide a variant of the optimization function above to only optimize the positions of hydrogen atoms:","category":"page"},{"location":"tutorials/force_field_ops/","page":"How to apply force fields","title":"How to apply force fields","text":"optimize_hydrogen_positions!(ff)","category":"page"},{"location":"#BiochemicalAlgorithms","page":"Home","title":"BiochemicalAlgorithms","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status)","category":"page"},{"location":"","page":"Home","title":"Home","text":"BiochemicalAlgorithms.jl is a redesign of the popular Biochemical Algorithms Library (BALL), the largest open source C++-framework of its kind. We focused on three main design goals: efficiency, ease of use and rapid application development (RAD). Our library provides functionality for file I/O, molecular modeling, molecular mechanics methods, and molecular visualization, and hence can serve as a foundation for developing applications within the Julia ecosystem.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install BiochemicalAlgorithms, open a Julia REPL, switch to the package mode by pressing ], and type","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add BiochemicalAlgorithms","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here is a simple impression of what you can do with BiochemicalAlgorithms.jl.  Central to every application is a System, which is filled with structures by reading in atom coordinates from PDB or PubChem JSON files. The system is preprocessed by the FragmentDB performing three steps: name normalization, reconstruction of missing atoms, and the construction of atomic bonds. The energy of the structure is evaluated using Amber forcefield.  With the help of BiochemicalVisualization.jl the structure can be visualized as a ball-and-stick model.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using BiochemicalAlgorithms\n\n# Read PDB file from the BiochemicalAlgorithms.jl repository\nsys = load_pdb(ball_data_path(\"../test/data/AlaAla.pdb\"))\n\nprintln(\"Number of atoms: \", natoms(sys))\nprintln(\"Number of bonds: \", nbonds(sys))\n\n# Prepare molecule\nfdb = FragmentDB()\nnormalize_names!(sys, fdb)\nreconstruct_fragments!(sys, fdb)\nbuild_bonds!(sys, fdb)\nprintln(\"Number of bonds: \", nbonds(sys))\n\n# Create Amber force field and compute the energy of the system\namber = AmberFF(sys)\ncompute_energy!(amber)\nprintln(amber.energy)","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If the previous section whetted your appetite, have a look at our tutorials to get started.","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You have ideas for improvements, criticism, or ran into problems?  You are looking for a feature that you know from BALL?  Feedback and contributions are very welcome. Check out our guidelines and use our issue tracker or contact us via e-mail.","category":"page"}]
}
